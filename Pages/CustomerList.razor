@page "/customerlist"
@attribute [Authorize]


@using RepPortal.Models
@using Syncfusion.Blazor.Grids
@using System.Text.Json
@using Blazored.LocalStorage
@using Microsoft.CodeAnalysis.Operations

<div class="container-fluid">
    <SfSpinner Size="100" Type="SpinnerType.Bootstrap5" Visible="@isLoading"></SfSpinner>

    @if (isLoading)
    {
        <p>Loading your customer list, please wait...</p>
    }
    else
    {
        <div>
            <div class="active-filters">
                <button @onclick="ClearFilters">Clear Filters</button>
                <button OnClick="@(async() =>await Grid.ResetPersistDataAsync())">Reset All</button>
                <!--
                <span class="divider">|</span>
                <strong class="small-text">Active Filters:</strong>
                <span class="small-text">@activeFilters</span>
                -->
            </div>
        </div>

        <SfGrid ID="Grid" @ref="Grid" RowHeight="20" DataSource="@customers" AllowExcelExport="true" AllowFiltering="true" EnablePersistence="true"
            Toolbar="@(new List<string>() { "Export to Excel",  "ColumnChooser" })"
            AllowResizing="true" AllowSelection="true" ShowColumnChooser="true" AllowReordering="true"
            AllowTextWrap="true" AllowSorting="true" Height="600" EnableVirtualization="false" EnableVirtualMaskRow="true">
            <GridPageSettings PageSizes="@(new string[] {"30", "60", "100",  "All" })"  PageSize="30" ></GridPageSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true" ></GridFilterSettings>
            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Customer" ></GridEvents>
            <GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>
            <GridColumns>
                <GridColumn Field=@nameof(Customer.Cust_Num) HeaderText="Cust Number" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.Cust_Name) HeaderText="Name" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.StatusDescription) HeaderText="Status" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.HoldStatusYN) HeaderText="Credit Hold" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.Corp_Cust) HeaderText="Corp Customer" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress1) HeaderText="Address 1" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress2) HeaderText="Address 2" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress3) HeaderText="Address 3" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress4) HeaderText="Address 4" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToCity) HeaderText="City" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToState) HeaderText="State" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToZip) HeaderText="Zip Code" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToCountry) HeaderText="Country" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.SalesManagerName) HeaderText="Sales Manager" Width="150">
                    <Template>
                        @{
                            var data = context as Customer;
                            var displayName = data.Status == "A" ? data.SalesManagerName : "To be assigned";
                            var tooltip = data.Status != "A" ? "Sales manager will be assigned when the account is activated" : string.Empty;
                        }
                        <span title="@tooltip">@displayName</span>
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(Customer.CreditHoldDate) HeaderText="Hold Date" Width="150">
                    <Template>
                        @{
                            var data = context as Customer;
                            if (data != null)
                            {
                                // Treat DateTime.MinValue (i.e., new DateTime()) as null and display blank
                                if (data.CreditHoldDate == DateTime.MinValue)
                                {
                                    <span></span>
                                }
                                else
                                {
                                    <span>@data.CreditHoldDateDisplay</span> 
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <!--GridColumn Field=@nameof(Customer.CreditHoldReason) HeaderText="Hold Code" Width="100"></!--GridColumn-->
                <GridColumn Field=@nameof(Customer.CreditHoldReasonDescription) HeaderText="Hold Reason" Width="140"></GridColumn>
                <GridColumn Field=@nameof(Customer.PricingCode) HeaderText="Pricing Code" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.FreightTerms) HeaderText="Standard Freight Terms" Width="150"></GridColumn>
                <GridColumn Field="BuyingGroup" HeaderText="Customer Type" Width="100">
                    <Template>
                        @{
                            var customer = context as Customer;
                            if (customer != null)
                            {
                                if (!string.Equals(customer.StatusDescription, "active", StringComparison.OrdinalIgnoreCase))
                                {
                                    @string.Empty;
                                }
                                else {
                                    <span title="@customer.BuyingGroupDescription">
                                        @customer.BuyingGroup
                                    </span>
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="BuyingGroupDescription" HeaderText="CustType Description" Width="200">
                    <Template>
                        @{
                            var customer = context as Customer;
                            if (customer != null)
                            {
                                if (!string.Equals(customer.StatusDescription, "active", StringComparison.OrdinalIgnoreCase))
                                {
                                    @string.Empty;
                                }
                                else {
                                    <span title="@customer.BuyingGroupDescription">
                                        @customer.BuyingGroupDescription
                                    </span>
                                }
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    }
</div>

<style>
    .e-grid .e-gridheader .e-headercell {
        height: 50px; /* Increase header height */
        white-space: normal !important; /* Allow text wrapping */
    }
    .e-grid .e-headercell {
        position: relative;
        padding-right: 25px !important; /* Space for the icon */
    }
    .e-grid .e-headercell {
        position: relative;
        padding-right: 1px !important; /* Space for the icon */
    }
    .e-grid .e-headercell .e-filtericon {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        margin-left: 0 !important;
    }
    .custom-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }
    .custom-grid .e-gridheader .e-headercell {
        font-size: 12px !important;
        padding: 10px !important; /* Adjust padding if text is cramped */
    }
    .custom-grid .e-rowcell {
        font-size: 10px !important;
    }
    .form-grid {
        display: grid;
        grid-template-columns: 2fr 2fr 2fr 6fr;
        gap: 20px;
    }
    .form-group {
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
    }
    .column {
        display: flex;
        flex-direction: column;
    }
    label {
        margin-bottom: 5px;
    }
    .input-container {
        height: 38px; /* Consistent height for all inputs */
    }
    .input-container :deep(input),
    .input-container :deep(InputDate) {
        width: 100%;
        height: 100%;
        box-sizing: border-box;
    }
    .button-row {
        margin-top: 20px;
    }
    .right-padding {
        padding-right: 0px; /* Adjust the padding as needed */
    }
</style>
