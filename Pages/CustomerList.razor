@page "/customerlist"
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject CustomerService CustomerService
@inject IRepCodeContext RepCodeContext
@inject TitleService TitleService

@using RepPortal.Models
@using Syncfusion.Blazor.Grids
@using System.Text.Json
@using Blazored.LocalStorage


<div class="container-fluid">
<SfSpinner Size="100" Type="SpinnerType.Bootstrap5" Visible="@isLoading"></SfSpinner>

@if (isLoading)
    {
        <p>Loading your customer list, please wait...</p>
    }
    else
    {
        <div>
            <div class="active-filters">
                <button @onclick="ClearFilters">Clear Filters</button>

                <!--
                <span class="divider">|</span>
                <strong class="small-text">Active Filters:</strong>
                <span class="small-text">@activeFilters</span>
                -->
            </div>

        </div>

        <SfGrid ID="Grid" @ref="Grid" RowHeight="20" DataSource="@customers" AllowExcelExport="true" AllowFiltering="true" EnablePersistence="true"
        Toolbar="@(new List<string>() { "Export to Excel",  "ColumnChooser" })"
        AllowResizing="true" AllowSelection="true" ShowColumnChooser="true" AllowReordering="true"
        AllowTextWrap="true" AllowSorting="true" Height="600" EnableVirtualization="false" EnableVirtualMaskRow="true">
            <GridPageSettings PageSizes="@(new string[] {"30", "60", "100",  "All" })"  PageSize="30" ></GridPageSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true" ></GridFilterSettings>
            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Customer" ></GridEvents>
            <GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>
            <GridColumns>
                <GridColumn Field=@nameof(Customer.Cust_Num) HeaderText="Cust Number" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.Cust_Name) HeaderText="Name" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.StatusDescription) HeaderText="Status" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.HoldStatusYN) HeaderText="Credit Hold" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.Corp_Cust) HeaderText="Corp Customer" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress1) HeaderText="Address 1" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress2) HeaderText="Address 2" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress3) HeaderText="Address 3" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToAddress4) HeaderText="Address 4" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToCity) HeaderText="City" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToState) HeaderText="State" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToZip) HeaderText="Zip Code" Width="100"></GridColumn>
                <GridColumn Field=@nameof(Customer.BillToCountry) HeaderText="Country" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.SalesManagerName) HeaderText="Sales Manager" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Customer.CreditHoldDate) HeaderText="Credit Hold Date" Width="150">
                    <Template>
                        @{
                            var data = context as Customer;
                            if (data != null)
                            {
                                // Treat DateTime.MinValue (i.e., new DateTime()) as null and display blank
                                if (data.CreditHoldDate == DateTime.MinValue)
                                {
                                    <span></span>
                                }
                                else
                                {
                                    <span>@data.CreditHoldDateDisplay</span> 
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(Customer.CreditHoldReason) HeaderText="Hold Code" Width="100"></GridColumn>
                <GridColumn Field="CreditHoldReason" HeaderText="Hold Description" Width="300">
	                <Template>
		                @{
			                var data = context as Customer;
			                if (data != null)
			                {
				                var description = GetHoldReasonDescription(data.CreditHoldReason);
				                <span title="@description">@description</span>
			                }
		                }
	                </Template>
                </GridColumn>
                <GridColumn Field=@nameof(Customer.PricingCode) HeaderText="Pricing Code" Width="150"></GridColumn>
            </GridColumns>
        </SfGrid>
    }
</div>

@code {
    private IEnumerable<Customer> customers;
    private string repCode;
    private bool isLoading = true;
    private SfGrid<Customer> Grid;
    //private List<CreditHoldReasonCode> reasonCodeList = new List<CreditHoldReasonCode>();
    public string _state;
    private List<CreditHoldReasonCode> _creditHoldReasons = new();
    private Dictionary<string, string> _reasonLookup = new();

    protected override async Task OnInitializedAsync()
    {

        //reasonCodeList = await CustomerService.GetAllReasonCodesAsync();
        _creditHoldReasons = await CustomerService.GetAllReasonCodesAsync();
        _reasonLookup = _creditHoldReasons
	        .Where(r => !string.IsNullOrWhiteSpace(r.Code))
	        .ToDictionary(r => r.Code, r => r.Description);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        repCode = user.FindFirst("RepCode")?.Value;

        repCode = RepCodeContext.CurrentRepCode;
        if (user.Identity.IsAuthenticated)
        {
	       
            var currentUser = await UserManager.GetUserAsync(user);
            if (!string.IsNullOrEmpty(repCode))
            {
               var allCustomers = await CustomerService.GetCustomersDetailsByRepCodeAsync();
                customers = allCustomers.Where(c => c.Status != "R" );

                isLoading = false;
            }
        }
        
        await base.OnInitializedAsync();
    }

    private async Task ClearFilters()
    {
	    await Grid.ClearFilteringAsync();

    }
    private string GetHoldReasonDescription(string code)
    {
	    if (string.IsNullOrWhiteSpace(code)) return string.Empty;
	    return _reasonLookup.TryGetValue(code, out var desc) ? desc : code;
    }

    private string GetStatusDescription(string status)
    {
        if (Enum.TryParse<Customer.CustomerStatus>(status, out var customerStatus))
        {
            return customerStatus.ToDescription();
        }
        return "Unknown";
    }

    private string YesNoAccessor(object data, string field)
    {
        var isActive = (int)data.GetType().GetProperty(field).GetValue(data, null);
        return isActive == 1 ? "Yes" : "No";
    }

    private List<CreditHoldLookup> creditHoldLookup = new()
    {
        new CreditHoldLookup { Id = 1, Text = "Yes" },
        new CreditHoldLookup { Id = 0, Text = "No" }
    };

    public class CreditHoldLookup
    {
        public int Id { get; set; }
        public string Text { get; set; }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
	    if (args.Item.Id == "Grid_Export to Excel") //Id is combination of Grid's ID and itemname
	    {
		    var ExcelFileName = $"Customers Report({RepCodeContext.CurrentRepCode}).xlsx";
		    ExcelExportProperties exportProperties = new ExcelExportProperties
		    {
			    FileName = ExcelFileName
		    };
		    await this.Grid.ExportToExcelAsync(exportProperties);
	    }

	    if (args.Item.Id == "Grid_Save Layout") //Id is combination of Grid's ID and itemname
	    {
		    
	    }

       
    }


    public class CreditHoldDateComparer : IComparer<object>
    {
	    public int Compare(object XRowDataToCompare, object YRowDataToCompare)
	    {
		    var xCust = XRowDataToCompare as Customer;
		    var yCust = YRowDataToCompare as Customer;

		    // grab the underlying nullable DateTime
		    DateTime? xDate = xCust?.CreditHoldDate;
		    DateTime? yDate = yCust?.CreditHoldDate;

		    // both null → equal
		    if (!xDate.HasValue && !yDate.HasValue)
			    return 0;

		    // only X is null → send X after Y
		    if (!xDate.HasValue)
			    return 1;

		    // only Y is null → send X before Y
		    if (!yDate.HasValue)
			    return -1;

		    // both have values → compare normally
		    return xDate.Value.CompareTo(yDate.Value);
	    }
    }


}

<style>
    .e-grid .e-gridheader .e-headercell {
        height: 50px; /* Increase header height */
        white-space: normal !important; /* Allow text wrapping */
        
    }
    /* Position the filter icon absolutely within the header cell */
    .e-grid .e-headercell {
        position: relative;
        padding-right: 25px !important; /* Space for the icon */
      
    }
    /* Position the filter icon absolutely within the header cell */
    .e-grid .e-headercell {
        position: relative;
        padding-right: 1px !important; /* Space for the icon */
    }

    .e-grid .e-headercell .e-filtericon {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        margin-left: 0 !important;
    }
    .custom-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }
    .custom-grid .e-gridheader .e-headercell {
        font-size: 12px !important;
        padding: 10px !important; /* Adjust padding if text is cramped */
    }

    .custom-grid .e-rowcell {
        font-size: 10px !important;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 2fr 2fr 2fr 6fr;
        gap: 20px;
    }
    .form-group {
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
    }
    .column {
        display: flex;
        flex-direction: column;
    }
    label {
        margin-bottom: 5px;
    }
    .input-container {
        height: 38px; /* Consistent height for all inputs */
    }
    .input-container :deep(input),
    .input-container :deep(InputDate) {
        width: 100%;
        height: 100%;
        box-sizing: border-box;
    }
    .button-row {
        margin-top: 20px;
    }
    .right-padding {
        padding-right: 0px; /* Adjust the padding as needed */

    }
</style>