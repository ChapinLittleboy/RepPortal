@page "/admin/manage-repcodes"
@attribute [Authorize(Roles = "Administrator")]
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JS

<h3>Manage RepCodes and Regions</h3>

@if (users == null)
{
    <p><em>Loading users...</em></p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Email</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Current RepCode</th>
                <th>Update RepCode</th>
                <th>Current Region</th>
                <th>Update Region</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.RepCode</td>
                    <td>
                        <input class="form-control form-control-sm"
                               style="width: 100px;"
                               @bind="user.EditedRepCode" />
                    </td>
                    <td>@user.Region</td>
                    <td>
                        <input class="form-control form-control-sm"
                               style="width: 100px;"
                               @bind="user.EditedRegion" />
                        <button class="btn btn-sm btn-primary mt-1"
                                @onclick="() => SaveRepAndRegion(user)">
                            Save
                        </button>
                    </td>
                    <td>@(user.IsActive ? "Active" : "Inactive")</td>
                    <td>
                        <button class="btn btn-sm @(user.IsActive ? "btn-danger" : "btn-success")"
                                @onclick="() => ToggleUserStatus(user)">
                            @(user.IsActive ? "Deactivate" : "Activate")
                        </button>

                        <AuthorizeView Roles="SuperUser">
                            <Authorized>
                                <button class="btn btn-sm btn-outline-danger ms-2"
                                        @onclick="() => DeleteUser(user)">
                                    Delete
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserWithEdit> users;

    protected override async Task OnInitializedAsync()
    {
        var allUsers = UserManager.Users.ToList();
        users = allUsers.Select(u => new UserWithEdit
            {
                Id = u.Id,
                Email = u.Email,
                FirstName = u.FirstName,
                LastName = u.LastName,
                RepCode = u.RepCode,
                EditedRepCode = u.RepCode,
                Region = u.Region,                   // <-- Load Region
                EditedRegion = u.Region,              // <-- Editable Region
                IsActive = u.IsActive
            }).ToList();
    }

    private async Task SaveRepAndRegion(UserWithEdit user)
    {
        var targetUser = await UserManager.FindByIdAsync(user.Id);
        if (targetUser != null)
        {
            targetUser.RepCode = user.EditedRepCode;
            targetUser.Region = user.EditedRegion;

            var result = await UserManager.UpdateAsync(targetUser);

            if (result.Succeeded)
            {
                user.RepCode = user.EditedRepCode;
                user.Region = user.EditedRegion;
                await UserManager.UpdateSecurityStampAsync(targetUser);
            }
        }
    }

    private async Task ToggleUserStatus(UserWithEdit user)
    {
        var targetUser = await UserManager.FindByIdAsync(user.Id);
        if (targetUser != null)
        {
            targetUser.IsActive = !targetUser.IsActive;
            var result = await UserManager.UpdateAsync(targetUser);
            if (result.Succeeded)
            {
                user.IsActive = targetUser.IsActive;
                await UserManager.UpdateSecurityStampAsync(targetUser);
            }
        }
    }

    private async Task DeleteUser(UserWithEdit user)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {user.Email}?");
        if (!confirmed)
            return;

        var targetUser = await UserManager.FindByIdAsync(user.Id);
        if (targetUser != null)
        {
            var result = await UserManager.DeleteAsync(targetUser);
            if (result.Succeeded)
            {
                users.Remove(user);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Failed to delete user:");
                foreach (var error in result.Errors)
                {
                    Console.WriteLine($" - {error.Description}");
                }
            }
        }
    }

    private class UserWithEdit
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string RepCode { get; set; }
        public string EditedRepCode { get; set; }
        public string Region { get; set; }          // Current Region
        public string EditedRegion { get; set; }    // Editable Region
        public bool IsActive { get; set; }
    }
}
