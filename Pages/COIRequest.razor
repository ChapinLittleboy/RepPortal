@page "/COIRequest"
@attribute [Authorize]
@using Newtonsoft.Json
@using System.Text
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Syncfusion.Blazor.DropDowns
@using FilterType = Syncfusion.Blazor.DropDowns.FilterType
@inject CustomerService CustomerService
@inject IRepCodeContext RepCodeContext
@inject IEmailService EmailService
@inject IConfiguration Configuration

<PageTitle>COI Request</PageTitle>

<h3>Certificate of Insurance Request</h3>


@if (isLoading)
{
    <p>Loading your customer list, please wait...</p>
}
else
{

    <div style="width: 50%; min-width: 320px;">
        <EditForm Model="@requestModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="customerName" class="form-label">Customer Name</label>
                <SfComboBox TValue="string"
                            TItem="Customer"
                            Value="@requestModel.CustomerName"
                            ValueChanged="OnCustomerNameChanged"
                            ValueExpression="@( () => requestModel.CustomerName )"
                            DataSource="@customerList"
                            DebounceDelay="@NumericValue"
                            AllowFiltering="true"
                            FilterType="FilterType.Contains"
                            @ref="WantedCust">
                    <ComboBoxFieldSettings Text="CustNameWithNum" Value="CustNameWithNum" />
                </SfComboBox>


            </div>


            Add



            <div class="mb-3">
                <label for="notes" class="form-label">Please add any clarifying notes below</label>
                <InputTextArea id="notes" class="form-control" @bind-Value="requestModel.Notes" />
            </div>

            <div class="mb-3">
                <label for="fileUpload" class="form-label">Upload Supporting Files (optional)</label>
                <InputFile OnChange="@OnInputFileChange" multiple />
                @if (uploadedFiles.Count > 0)
                {
                    <ul>
                        @foreach (var file in uploadedFiles)
                        {
                            <li>@file.Name (@(file.Size / 1024) KB)</li>
                        }
                    </ul>
                }
            </div>

            <!--
            <div class="form-check mb-3">
                <InputCheckbox id="emailMeCopy" class="form-check-input" @bind-Value="EmailMeCopy" />
                <label class="form-check-label" for="emailMeCopy">Email me a copy of this request</label>
            </div>
                -->


            <button type="submit" class="btn btn-primary">Send Request</button>
        </EditForm>
    </div>
}


@if (!string.IsNullOrEmpty(submitMessage))
{
    <div class="alert alert-info mt-3">@submitMessage</div>
}



@code {

    
    private COIRequestModel requestModel = new()
    {
        // CustomerType = "" // Ensures dropdown binding works
    };

    private List<IBrowserFile> uploadedFiles = new();
    private string submitMessage;
    private List<Customer> customerList = new();
    private bool isLoading = true;
    private string WantedCustNum = string.Empty;
    private int NumericValue = 50; // Default value for the combo box DeBounceDelay
    public SfComboBox<string, Customer> WantedCust { get; set; }
    public bool EmailMeCopy { get; set; }
    private string recipientEmail;
    

    protected override async Task OnInitializedAsync()
    {
        recipientEmail = Configuration["COIRequest:RecipientEmail"];
        var repCode = RepCodeContext.CurrentRepCode;
        customerList = await CustomerService.GetCustomerNamesByRepCodeAsync();
        isLoading = false;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadedFiles.Clear();
        uploadedFiles.AddRange(e.GetMultipleFiles());
    }

    private void OnCustomerNameChanged(string newValue)
    {
        requestModel.CustomerName = newValue;
        submitMessage = "";
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            var selectedCustomer = customerList
                .FirstOrDefault(c => c.CustNameWithNum == requestModel.CustomerName);
            var custNameWithNum = selectedCustomer?.CustNameWithNum ?? "Unknown";

            var subject = $"COI Request for {custNameWithNum} by Rep: {RepCodeContext.CurrentRepCode} ";
            var body = $@"
                <strong>Rep Code:</strong> {RepCodeContext.CurrentRepCode}<br>
                <strong>Rep Name:</strong> {RepCodeContext.CurrentFirstName} {RepCodeContext.CurrentLastName}<br>
                <strong>Logged-in Rep Email:</strong> {RepCodeContext.CurrentFirstName} {RepCodeContext.UserName}<br>
                <strong>Customer:</strong> {custNameWithNum}<br>
                <strong>Notes:</strong> {requestModel.Notes}<br>";

            var attachments = new List<EmailAttachment>();
            foreach (var file in uploadedFiles)
            {
                var ms = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(ms);
                attachments.Add(new EmailAttachment
                {
                    FileName = file.Name,
                    ContentType = file.ContentType,
                    Content = ms.ToArray()
                });
            }

            // Add attachment info to the email body
            body += $"<br><strong>Number of Attachments:</strong> {uploadedFiles.Count}<br>";
            if (uploadedFiles.Count > 0)
            {
                body += "<strong>Attachment File Names:</strong><br>";
                foreach (var file in uploadedFiles)
                {
                    body += $"{file.Name}<br>";
                }
            }

            await EmailService.SendEmailAsync(recipientEmail, subject, body, true, attachments);

            if (EmailMeCopy)
            {
                await EmailService.SendEmailAsync(RepCodeContext.UserName, $"Certificate of Insurance Request for {custNameWithNum} (Your copy)", body, true, attachments);
            }

            submitMessage = "Request sent successfully! You should receive the Certificate of Insurance within 3 business days.";
            requestModel = new COIRequestModel { };
            uploadedFiles.Clear();
        }
        catch (Exception ex)
        {
            submitMessage = $"Error: {ex.Message}";
        }
    }

    public class COIRequestModel
    {
        public string CustomerNumber { get; set; }
        public string CustomerName { get; set; }
        public string Notes { get; set; }
        public bool EmailMeCopy { get; set; } = false;


    }


}









