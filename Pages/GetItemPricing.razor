@page "/getitempricing"
@using FilterType = Syncfusion.Blazor.DropDowns.FilterType
@attribute [Authorize]
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.DropDowns
@inject IItemService ItemService
@inject ILogger<GetItemPricing> Logger

@* at top of your Razor component *@
<div class="d-flex flex-column align-items-center" style="margin-top:1in;">
	<h3>Item Price Lookup (Non-Contract pricing)</h3>
</div>
<div class="d-flex flex-column align-items-center" style="margin-top:0.5in;">
	

	@if (isReady)
	{
		<div class="w-100" style="max-width:400px;">
			<div class="d-flex">
				<SfTextBox
					CssClass="flex-grow-1 me-2"
					Placeholder="Enter Item number"
					@bind-Value="selectedItem" />
				<button class="btn btn-primary" @onclick="LoadItem">Lookup</button>
			</div>
		</div>
	}

	@if (isLoading)
	{
		<p class="mt-3"><em>Loading…</em></p>
	}
	else if (lookupPerformed)
	{
		@if (detail != null)
		{
			<div class="d-flex align-items-start mt-4">
				<img
					src="@GetImageUrl(detail.Item)"
					onerror="this.onerror=null;this.src='https://via.placeholder.com/300x300?text=No+Image';"
					alt="Item Image"
					width="200" height="300"
					class="me-4" />

				<div>
					<p><strong>Part Number:</strong> @detail.Item</p>
					<p><strong>Description:</strong> @detail.Description</p>
					<p><strong>List Price:</strong> @detail.Price1.ToString("C2")</p>
					<p><strong>4K Book Pricing:</strong> @detail.Price2.ToString("C2")</p>
					<p><strong>12.5K Book Pricing:</strong> @detail.Price3.ToString("C2")</p>
				</div>
			</div>
		}
		else
		{
			<p class="text-danger mt-3"><strong>Item Number Not Found!</strong></p>
		}
	}
</div>


@code {
	private List<ItemInfo> items = new();
	private string selectedItem;
	private ItemDetail detail;
	private bool isLoading;
	private bool lookupPerformed;
	private bool isReady = false;

	public string ChangeValue { get; set; } = "Basketball";
	public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ItemInfo> args)
	{
		//this.ChangeValue = args.items?.Text;
	}
	protected override async Task OnInitializedAsync()
	{
		//items = await ItemService.GetItemsAsync();
		//Logger.LogInformation("DIAGNOSTIC: Loaded {Count} items", items.Count);
		isReady = true;

	}

	private async Task LoadItem()
	{
		lookupPerformed = false;
		detail = null;
		
		if (string.IsNullOrWhiteSpace(selectedItem))
			return;
		
		isLoading = true;
		detail = await ItemService.GetItemDetailAsync(selectedItem);
		isLoading = false;
		lookupPerformed = true;
	}

	private string GetImageUrl(string item)
	{
		// mirror your old ASP logic
		if (item.Contains("-"))
			return $"https://www.chapinportal.com/Images/Parts/{item}.jpg";
		else
			return $"https://www.chapinportal.com/Images/Sprayers/{item}.gif";
	}
}



