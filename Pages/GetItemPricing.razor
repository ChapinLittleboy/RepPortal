@page "/getitempricing"
@attribute [Authorize]

@using FilterType = Syncfusion.Blazor.DropDowns.FilterType
@attribute [Authorize]
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.DropDowns
@inject IItemService ItemService
@inject ILogger<GetItemPricing> Logger
@inject IPriceBookService PriceBookService
@using Syncfusion.Blazor.Navigations


@* at top of your Razor component *@

<div class="row mt-4">
	<!-- Left column: lookup input + detail -->
	<div class="col-lg-6">
		

		<div class="col-12 text-center mb-3">
			<h4>Item Price Lookup (non-contract)</h4>
		</div>
		<div class="col-12 d-flex justify-content-center mb-2 mt-2">
			<SfTextBox CssClass="me-2" Placeholder="Enter Item number" Width="150px"
			           @bind-Value="selectedItem"/>
			<button class="btn btn-primary" @onclick="LoadItem">
				<i class="fa fa-search"></i>
			</button>
		</div>


		@if (lookupPerformed)
		{
			@if (detail != null)
			{
				<div class="d-flex">
					<img src="@GetImageUrl(detail.Item)" alt="Item" width="200" height="300"
						 class="me-4" onerror="this.src='https://via.placeholder.com/200x300?text=No+Image';" />
					<div>
						<p><strong>Part #:</strong> @detail.Item</p>
						<p><strong>Description:</strong> @detail.Description</p>
						<p><strong>Item Status:</strong> @detail.ItemStatusExpandedDescription</p>
						<p><strong>List:</strong> @detail.Price1.ToString("C2")</p>
						<p><strong>4K Book:</strong> @detail.Price2.ToString("C2")</p>
						<p><strong>12.5K Book:</strong> @detail.Price3.ToString("C2")</p>
					</div>
				</div>
			}
			else
			{
				<p class="text-danger"><strong>Item Not Found!</strong></p>
			}
		}
	</div>

	<!-- Right column: folder links + file lists -->
	<div class="col-lg-6">
		<h4>Pricing Folders</h4>
		<!--
		<div>
			@foreach (var folder in PriceBookFolders)
			{
				<p><strong>@folder.DisplayName</strong> (@folder.Files.Count files):</p>
				<ul>
					@foreach (var file in folder.Files)
					{
						<li>
							<a href="@file.Url" target="_blank">@file.Name</a>
						</li>
					}
				</ul>
			}
		</div>
		-->
		<SfAccordion ExpandMode="ExpandMode.Single"> @* Or Multiple *@
			<AccordionItems>
				@foreach (var folder in PriceBookFolders)
				{
					// Start of the AccordionItem for this folder
					<AccordionItem Expanded="false"> @* Optional: Control initial state *@

						@* --- Content for the collapsed header MUST be inside HeaderTemplate --- *@
						<HeaderTemplate>
							<strong>@folder.DisplayName</strong> (@folder.Files.Count files)
						</HeaderTemplate>

						@* --- Content for the expanded panel MUST be inside ContentTemplate --- *@
						<ContentTemplate>
							@* Only put content related to the expanded view here *@
							<ul>
								@foreach (var file in folder.Files)
								{
									<li>
										<a href="@file.Url" target="_blank">@file.Name</a>
									</li>
								}
							</ul>
							@if (!folder.Files.Any())
							{
								<p><em>No files in this folder.</em></p>
							}
						</ContentTemplate>

					</AccordionItem> 
					@* End of the AccordionItem for this folder. No other text/HTML allowed between here and </AccordionItem> *@
				}
			</AccordionItems>
		</SfAccordion>

	</div>
</div>


@code {
	private List<ItemInfo> items = new();
	private string selectedItem;
	private ItemDetail detail;
	private bool isLoading;
	private bool lookupPerformed;
	private bool isReady = false;
	public List<PriceBookFolder> PriceBookFolders = new();

	public string ChangeValue { get; set; } = "Give Bill a raise";
	public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ItemInfo> args)
	{
		//this.ChangeValue = args.items?.Text;
	}
	protected override async Task OnInitializedAsync()
	{
		string StaticRequestPath = "/RepDocs";


		// Retrieve the folders
		PriceBookFolders = await PriceBookService.GetPriceBookFoldersAsync();

		// Log the contents of the /RepDocs folder
		var repDocsFolder = PriceBookFolders.FirstOrDefault(folder => folder.FolderRelativePath == StaticRequestPath);
		if (repDocsFolder != null)
		{
			foreach (var file in repDocsFolder.Files)
			{
				Logger.LogInformation("File: {Name}, Size: {SizeText}, URL: {Url}", file.Name, file.SizeText, file.Url);
			}
		}
		else
		{
			Logger.LogWarning("The folder '/RepDocs' was not found.");
		}
		//items = await ItemService.GetItemsAsync();
		//Logger.LogInformation("DIAGNOSTIC: Loaded {Count} items", items.Count);
		isReady = true;

	}

	private async Task LoadItem()
	{
		lookupPerformed = false;
		detail = null;

		if (string.IsNullOrWhiteSpace(selectedItem))
			return;

		isLoading = true;
		detail = await ItemService.GetItemDetailAsync(selectedItem);
		isLoading = false;
		lookupPerformed = true;
	}

	private string GetImageUrl(string item)
	{
		// mirror your old ASP logic
		if (item.Contains("-"))
			return $"https://www.chapinportal.com/Images/Parts/{item}.jpg";
		else
			return $"https://www.chapinportal.com/Images/Sprayers/{item}.gif";
	}
}




