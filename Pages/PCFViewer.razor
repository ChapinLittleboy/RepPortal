@inject PcfService PcfService
@inject ILogger<PCFViewer> Logger
@inject SalesService SalesService
@inject IRepCodeContext RepCodeContext

@page "/pcfviewer/{pcfNumber:int}"
@using System.Globalization
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web
@using RepPortal.Models

@if(isLoading)
{
<p>Loading...</p>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
<p class="text-danger">@_errorMessage</p>
}
else if (isReady )
{
    <div class="container pcf-header-details my-4">
        <h2 class="mb-4">PCF Header Details</h2>

        <!-- Header Information Card -->
        <div class="card mb-4">
            <div class="card-body">
                <!-- Row 1: Customer and PCF Basic Info -->
                <div class="row mb-2">
                    <div class="col-md-4">
                        <strong>Customer Number:</strong>
                        <div>@pcfHeader.CustomerNumber</div>
                    </div>
                    <div class="col-md-4">
                        <strong>Customer Name:</strong>
                        <div>@pcfHeader.CustomerName</div>
                    </div>
                    <div class="col-md-4">
                        <strong>PCF Number:</strong>
                        <div>@pcfHeader.PcfNumber</div>
                    </div>
                </div>

                <!-- Row 2: PCF Type and Dates -->
                <div class="row mb-2">
                    <div class="col-md-4">
                        <strong>PCF Type:</strong>
                        <div>@pcfHeader.PCFTypeDescription</div>
                    </div>
                    <div class="col-md-4">
                        <strong>Start Date:</strong>
                        <div>@pcfHeader.StartDate.ToString("MM-dd-yyyy")</div>
                    </div>
                    <div class="col-md-4">
                        <strong>End Date:</strong>
                        <div>@pcfHeader.EndDate.ToString("MM-dd-yyyy")</div>
                    </div>
                </div>

                <!-- Row 3: Bill To Address -->
                <div class="row mb-2">
                    <div class="col-md-12">
                        <strong>Bill To Address:</strong>
                        <div>
                            @pcfHeader.BillToAddress, @pcfHeader.BillToCity,
                            @pcfHeader.BTState, @pcfHeader.BTZip
                        </div>
                    </div>
                </div>

                <!-- Row 4: Buying Group and Promo Terms (conditional) -->
                <div class="row mb-2">
                    <div class="col-md-4">
                        <strong>Buying Group:</strong>
                        <div>@pcfHeader.BuyingGroup</div>
                    </div>
                    @if (pcfHeader.PcfType == "PD" || pcfHeader.PcfType == "PW")
                    {
                        <div class="col-md-4">
                            <strong>Promo Payment Terms:</strong>
                            <div>@pcfHeader.PromoPaymentTermsDescription</div>
                        </div>
                        <div class="col-md-4">
                            <strong>Promo Freight Terms:</strong>
                            <div>@pcfHeader.PromoFreightTerms</div>
                        </div>
                        <div class="col-md-4">
                            <strong>Promo Freight Minimums:</strong>
                            <div>@pcfHeader.PromoFreightMinimums</div>
                        </div>
                    }
                </div>

                <!-- Row 5: Representative Info -->
                <div class="row mb-2">
                    <div class="col-md-4">
                        <strong>Rep Code:</strong>
                        <div>@pcfHeader.RepCode</div>
                    </div>
                    <div class="col-md-4">
                        <strong>Rep Name:</strong>
                        <div>@pcfHeader.RepName</div>
                    </div>
                    <div class="col-md-4">
                        <strong>Rep Agency:</strong>
                        <div>@pcfHeader.RepAgency</div>
                    </div>
                </div>

                <!-- Row 6: General Notes -->
                <div class="row mb-2">
                    <div class="col-md-12">
                        <strong>General Notes:</strong>
                        <div>@pcfHeader.GeneralNotes</div>
                    </div>
                </div>

                <!-- Row 7: Sales Manager and Approval Date -->
                <div class="row mb-2">
                    <div class="col-md-4">
                        <strong>Sales Manager:</strong>
                        <div>@pcfHeader.SalesManager</div>
                    </div>
                    <div class="col-md-4">
                        <strong>Approval Date:</strong>
                        <div>@(pcfHeader.VPSalesDate.HasValue ? pcfHeader.VPSalesDate.Value.ToString("MM-dd-yyyy") : "N/A")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- PCF Lines Grid -->
        <h3 class="mb-3">PCF Lines</h3>
        <SfGrid DataSource="pcfHeader.PCFLines" >
            <GridColumns>
                <GridColumn Field="ItemNum" HeaderText="Item Number" Width="150"></GridColumn>
                <GridColumn Field="ItemDesc" HeaderText="Item Description" Width="300"></GridColumn>
                <GridColumn Field="ApprovedPrice" HeaderText="Approved Price" Format="C2" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="ItemStatusDescription" HeaderText="Item Status" Width="150"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

}



@code {
	[Parameter] 
	public int pcfNumber { get; set; }


	private string? _errorMessage;
	private PCFHeader? pcfHeader;
	private bool isLoading = true;
	private bool isReady = false;



	protected override async Task OnInitializedAsync()
	{
		try
		{
			pcfHeader = await PcfService.GetPCFHeaderWithItemsAsync(pcfNumber);

			if (pcfHeader != null)
			{
				Displaylogging();
				isLoading = false;
				isReady = true;
			}
			else
			{
				Logger.LogWarning("No PCFHeader found for PCFNumber: {PcfNumber}", pcfNumber);
			}
		}
		catch (Exception ex)
		{
			_errorMessage = $"Error loading PCF file: {ex.Message}";
			Logger.LogError(ex, "Error loading PCF file for PCFNumber: {PcfNumber}", pcfNumber);
		}
	}

	private void Displaylogging()
	{
		Logger.LogInformation("PCFHeader Details:");
		foreach (var property in typeof(PCFHeader).GetProperties())
		{
		var value = property.GetValue(pcfHeader);
		Logger.LogInformation("{PropertyName}: {Value}", property.Name, value);
	}
	// Log PCFLines data
	if (pcfHeader.PCFLines != null && pcfHeader.PCFLines.Any())
	{
		Logger.LogInformation("PCFLines Details:");
		foreach (var line in pcfHeader.PCFLines)
		{
			Logger.LogInformation("PCFLine:");
			foreach (var property in typeof(PCFItem).GetProperties())
			{
				var value = property.GetValue(line);
				Logger.LogInformation("{PropertyName}: {Value}", property.Name, value);
			}
		}
	}
	else
	{
		Logger.LogInformation("No PCFLines found for PCFNumber: {PcfNumber}", pcfNumber);
	}
	}
}
