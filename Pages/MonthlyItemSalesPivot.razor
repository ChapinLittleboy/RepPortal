@page "/monthly-item-sales-pivot"
@attribute [Authorize]
@using System.Dynamic
@using System.Globalization
@using RepPortal.Services
@using RepPortal.Data
@using RepPortal.Models
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.PivotView
@inject SalesService SalesService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IRepCodeContext RepCodeContext
@inject RepPortal.Services.IActivityLogService ActivityLogService

<PageTitle>Pivot Table Sales by Item</PageTitle>
<meta name="referrer" content="never" />

<div class="control-section">
    <div class="content-wrapper">
        
        @if (isLoading)
        {
            <!-- Option A: full-page spinner -->
            <div class="loading-wrap">
                <SfSpinner Visible="true" Label="Loading pivot..." Size="40"></SfSpinner>
            </div>
        }
        else
        {
            <!-- Option B: pivot appears only once data is ready -->
            <div class="pivot-wrap">
                <SfPivotView ID="PivotView" TValue="SaleRow" Height="600"
                             AllowCalculatedField="true"
                             ShowFieldList="true"
                             ShowGroupingBar="true"
                             ShowToolbar="true"
                             Toolbar="@PivotToolbar"
                             EnableValueSorting="true"
                             EnableVirtualization="true"
                             AllowExcelExport="true"
                             ExportAllPages="false">

                    <PivotViewDataSourceSettings DataSource="@Sales"
                                                 ShowAggregationOnValueField="false"
                                                 ExpandAll="false">
                        <PivotViewTemplates>
                            <CellTemplate>
                                @{
                                    var cell = context as Syncfusion.Blazor.PivotView.AxisSet;

                                    if (cell != null && cell.Axis == "column")
                                    {
                                        bool isFiscalYearLevel =
                                        (cell.Hierarchy?.Contains("FiscalYear", StringComparison.OrdinalIgnoreCase) ?? false) ||
                                        (cell.LevelUniqueName?.Contains("FiscalYear", StringComparison.OrdinalIgnoreCase) ?? false);

                                        if (isFiscalYearLevel && !string.IsNullOrEmpty(cell.FormattedText))
                                        {
                                            @($"FY{cell.FormattedText}")
                                        }
                                        else
                                        {
                                            @cell.FormattedText
                                        }
                                    }
                                    else
                                    {
                                        @cell?.FormattedText
                                    }
                                }
                            </CellTemplate>
                        </PivotViewTemplates>

                        <PivotViewRows>
                            <PivotViewRow Name="CorpNumWithName" Caption="CorpCust" ExpandAll="true" AllowDragAndDrop=true/>
                            <PivotViewRow Name="ItemNumWithProduct" Caption="Item" />
                        </PivotViewRows>

                        <PivotViewColumns>
                            <PivotViewColumn Name="FiscalYearLabel" Caption="FiscalYear" ShowValueTypeIcon="false" />
                            <PivotViewColumn Name="QuarterOfFiscalYearLabel" Caption="Quarter" />
                            <PivotViewColumn Name="NumberedMonthShort" Caption="Month" />
                        </PivotViewColumns>

                        <PivotViewValues>
                            <PivotViewValue Name="Quantity" Type="SummaryTypes.Sum" Caption="Qty" ShowValueTypeIcon="false" />
                            <PivotViewValue Name="SalesAmount" Type="SummaryTypes.Sum" Caption="Amount" />
                        </PivotViewValues>

                        <PivotViewFormatSettings>
                            <PivotViewFormatSetting Name="SalesAmount" Format="C" />
                        </PivotViewFormatSettings>
                    </PivotViewDataSourceSettings>

                    <PivotViewGroupingBarSettings ShowFilterIcon="true"
                                                  ShowSortIcon="false"
                                                  ShowRemoveIcon="true"
                                                  ShowValueTypeIcon="false" />
                    <PivotViewEvents TValue="SaleRow" BeforeExport="beforeExport" ></PivotViewEvents>
                </SfPivotView>
            </div>
        }
    </div>
</div>

<style>
    .page-heading {
        margin: 0 0 12px 0;
    }

    .control-section {
        min-height: 300px;
    }

    .loading-wrap {
        min-height: 300px; /* reserve space so layout doesn't jump */
        display: grid;
        place-items: center;
    }

    .pivot-wrap {
        position: relative;
    }

    /* Your existing styling */
    .e-pivotview {
        min-height: 200px;
    }

        .e-pivotview .e-grouping-bar {
            border: 0;
            background: transparent;
        }

            .e-pivotview .e-grouping-bar .e-pivot-button {
                background: #f6f7f9;
                border: 1px solid #e5e7eb;
                border-radius: 12px;
                box-shadow: none;
                padding: 4px 0px;
                visibility: hidden;
                margin: 4px 6px;
                min-height: 10px;
                transition: background .15s ease, border-color .15s ease;
            }

    html, body {
        height: 100%;
    }

    .e-custom-class {
        text-decoration: auto;
    }

        .e-custom-class:hover {
            text-decoration: underline;
        }

    .e-pivotview .e-grouping-bar .e-pivot-button .e-pvt-btn-div .e-icons {
        opacity: .45;
        transition: opacity .15s;
    }
    /* Hide the "Drop Filter Here" section in the Grouping Bar */
    #PivotView .e-group-filters {
        display: none;
    }

    /* (Optional) reclaim the space so the layout doesn’t look gappy */
    #PivotView .e-group-columns,
    #PivotView .e-group-rows,
    #PivotView .e-group-values {
        min-height: 4.67px !important; /* adjust if needed */
    }
    /* Hide the whole Grouping Bar */
    #PivotView .e-pivot-grouping-bar {
        display: none !important;
    }
    #PivotView .e-grouping-bar .e-left-axis-fields {
        display: none !important;}

    #PivotView .e-grouping-bar .e-right-axis-fields {
        display: none !important;
    }
</style>

@code {
    // Make Sales nullable so we can gate rendering clearly
    public List<SaleRow>? Sales { get; set; }
    private bool isLoading = true;

    public List<Syncfusion.Blazor.PivotView.ToolbarItems> PivotToolbar = new()
    {
        Syncfusion.Blazor.PivotView.ToolbarItems.FieldList,
        Syncfusion.Blazor.PivotView.ToolbarItems.Export

    };

    // IMPORTANT: Let the page render first, then fetch.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            // Trigger the initial render (spinner is visible), then fetch
            Sales = await SalesService.GetRecentSalesAsync();
        }
        finally
        {
            isLoading = false;
            // After async work, request a re-render
            StateHasChanged();
        }
    }


    public void beforeExport(BeforeExportEventArgs args)
    {
        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        var repCode = RepCodeContext.CurrentRepCode;
        ExcelProperties.FileName = $"PivotExport ({repCode}) {DateTime.Now:yyyy-MM-dd HH-mm}.xlsx";
        args.ExcelExportProperties = ExcelProperties;
        args.FileName = ExcelProperties.FileName;
    }






    // (Optional) If you still have logic in OnInitializedAsync,
    // keep it light and non-blocking. Don't fetch data here.

    public class SaleRow
    {
        public DateTime OrderDate { get; set; }
        public string CustomerName { get; set; } = "";
        public string CorporateName { get; set; } = "";
        public string ProductName { get; set; } = "";
        public int Quantity { get; set; }
        public decimal SalesAmount { get; set; }
        public string CustNum { get; set; } = "";
        public string ItemNum { get; set; } = "";
        public string MonthShort { get; set; } = "";
        public int DayOfMonth { get; set; }
        public int FiscalYear { get; set; }
        public string DayShort { get; set; } = "";
        public int MonthOfFiscalYear { get; set; }
        public int QuarterOfFiscalYear { get; set; }

        public string ItemNumWithProduct => $"{ItemNum} - {ProductName}";
        public string CustomerNameWithNum => $"{CustomerName} ({CustNum.Trim()})";
        public string NumberedMonthShort => $"{MonthOfFiscalYear} - {MonthShort}";
        public string QuarterOfFiscalYearLabel => $"Fiscal Q{QuarterOfFiscalYear}";
        public string CorpNumWithName => $"{CustNum} - {CorporateName}";
        public string FiscalYearLabel => $"FY{FiscalYear}";
    }
}
