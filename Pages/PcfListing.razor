@inject PcfService PcfService
@inject IJSRuntime JSRuntime
@inject ILogger<PcfListing> Logger
@inject NavigationManager NavigationManager
@inject RepPortal.Services.IActivityLogService ActivityLogService
@using RepPortal.Models
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons

@page "/pcflist"
@attribute [Authorize]

@if (isLoading)
{
	<div>Loading...</div>
}
else
{
	<div class="active-filters">
		<button @onclick="ClearFilters">Clear Filters</button>
	</div>
	 <div>
        <SfGrid ID="PcfsGrid" @ref="MyGrid" DataSource="@pcfHeaders" Height="600px" Width="100%" CssClass="custom-grid" AllowResizing="true"
                AllowFiltering="true" AllowMultiSorting="true" AllowSorting="true" AllowExcelExport="true" Toolbar="@(new string[] { "ExcelExport", "ColumnChooser"})"
        AllowPaging="false" EnablePersistence="false" AllowTextWrap="true"  AllowReordering="true" ShowColumnChooser="true" >
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>

            <GridSortSettings>
                <GridSortColumns>
                    <GridSortColumn Field="PcfStatus" Direction="SortDirection.Ascending"></GridSortColumn>
                    <GridSortColumn Field="CustomerName" Direction="SortDirection.Ascending"></GridSortColumn>
                    <GridSortColumn Field="StartDate" Direction="SortDirection.Descending"></GridSortColumn>
                </GridSortColumns>
            </GridSortSettings>
            <GridEvents OnToolbarClick="ToolbarClickHandler"  TValue="PCFHeader"></GridEvents>
          
            <GridColumns>
                <GridColumn Field="CustomerNumber" HeaderText="Cust Num" Width="8%" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field="CustomerName" HeaderText="Customer Name" Width="15%" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field="BuyingGroup" HeaderText="Buying Group" Width="15%" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field="StartDate" HeaderText="Start Date" Format="d" Width="8%" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="EndDate" HeaderText="End Date" Format="d" Width="8%" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="PcfNumber" HeaderText="PCF Number" Width="8%" TextAlign="TextAlign.Center" IsPrimaryKey="true"></GridColumn>
                <!-- Status icon column using a template -->
                <GridColumn Field="PCFStatusDescription" HeaderText="Status" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" Width="100">
                    <Template>
                        @{
                            var header = (PCFHeader)@context;
                            string status = header.PCFStatusDescription;
                            @if (status == "New")
                            {
                                <div class="statusback e-newcolor">
                                    <span class="statustxt e-newcolor">@header.PCFStatusDescription</span>
                                </div>
                            }
                            else if (status == "Approved")
                            {
                                <div class="statusback e-approvedcolor">
                                    <span class="statustxt e-approvedcolor">@header.PCFStatusDescription</span>
                                </div>
                            }
                            else
                            {
                                <div class="statusback e-expiredcolor">
                                    <span class="statustxt e-expiredcolor">@header.PCFStatusDescription</span>
                                </div>
                            }

                        }


                    </Template>
                </GridColumn>

                <GridColumn Field="RepCode" HeaderText="RepCode" Width="8%" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field="Salesman" HeaderText="SalesRep" Width="8%" TextAlign="TextAlign.Left"></GridColumn>

                <GridColumn Field="PCFTypeDescription" HeaderText="PCF Type" Width="12%" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field="SalesManager" HeaderText="SalesMgr" Width="8%"></GridColumn>

                <GridColumn HeaderText="Action!" Width="7%">
                    <Template Context="pcfObj">
	                    <SfButton CssClass="custom-edit-button e-small" @onclick="() => NavigateToPCFDetails(((PCFHeader)pcfObj).PcfNumber)">Details</SfButton>
                    </Template>
                </GridColumn>

            </GridColumns>
        </SfGrid>
    </div>

}







@code {
	
	private string? _errorMessage;
	private bool isLoading = false;

	private List<PCFHeader> pcfHeaders = new List<PCFHeader>();
	private SfGrid<PCFHeader> MyGrid;

	protected override async Task OnInitializedAsync()
	{
		// Log report usage (no parameters for listing page)
		await ActivityLogService.LogReportUsageActivityAsync("PCF Listing Report", "");
		try
		{
			pcfHeaders = await PcfService.GetPCFHeadersForRepBySlsman();
            Logger.LogInformation("starting try");
			if (pcfHeaders != null)
			{

				Console.WriteLine(pcfHeaders.Count);
			}
			if (pcfHeaders.Any())
			{
				var firstRecord = pcfHeaders.First();
				Logger.LogInformation("First PCFHeader Record:");
				foreach (var property in typeof(PCFHeader).GetProperties())
				{
					var value = property.GetValue(firstRecord);
					Logger.LogInformation("{PropertyName}: {Value}", property.Name, value);
				}
			}
		}
		catch (Exception ex)
		{
			_errorMessage = $"Error loading PCF files: {ex.Message}";
		}
		finally
		{
			isLoading = false;
		}
	}

	public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
	{
		if (args.Item.Id == "PcfsGrid_excelexport") //Id is combination of Grid's ID and itemname
		{
			var ExcelFileName = $"PCFListing.xlsx";
			ExcelExportProperties exportProperties = new ExcelExportProperties
			{
				FileName = ExcelFileName
			};
			await this.MyGrid.ExportToExcelAsync(exportProperties);
		}
	}

	private  void NavigateToPCFDetails(string pcfNumber)
	{
	

		NavigationManager.NavigateTo($"/pcfviewer/{pcfNumber}");

	}

	public class StatusOptions
	{
		public string StatusCode { get; set; }
	}
	private List<StatusOptions> pcfStatusOptions = new List<StatusOptions>
	{
		new StatusOptions() {StatusCode = "New" },
		new StatusOptions() {StatusCode = "Active" },
		new StatusOptions() {StatusCode = "Future" },
		new StatusOptions() {StatusCode = "Expired" },
		new StatusOptions() {StatusCode = "All" }
	};


	private async Task ClearFilters()
	{
		await MyGrid.ClearFilteringAsync();
		
	}

}


<style>
    /* Grid base styles */
    .e-grid {
        max-width: 100% !important;
        overflow-x: auto !important;
    }

        .e-grid .e-headercelldiv {
            font-size: 12px;
        }

        .e-grid .e-rowcell {
            font-size: 12px;
        }

    /* Custom grid styling */
    .custom-grid {
        width: 100% !important;
        overflow-x: auto !important;
    }

        .custom-grid .e-grid .e-row,
        .custom-grid .e-rowcell,
        .custom-grid .e-headercell {
            height: 16px !important;
            line-height: 14px !important;
            font-size: 10px !important;
            padding-top: 0 !important;
            padding-bottom: 0 !important;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .custom-grid .e-grid .e-headercell {
            height: 25px !important;
        }

        /* Cell content vertical alignment */
        .custom-grid .e-rowcell > div,
        .custom-grid .e-headercell > div {
            display: flex;
            align-items: center;
            height: 100%;
        }

    /* Status styles */
    .statusback {
        position: relative;
        height: 14px !important;
        border-radius: 5px;
        width: 64px;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        margin: 0;
        padding: 0 4px;
    }

        .statusback.e-newcolor {
            background-color: #ffd7cc;
            color: #e60000;
        }

        .statusback.e-approvedcolor {
            background-color: #ccffcc;
            color: #00cc00;
        }

        .statusback.e-expiredcolor {
            background-color: lightgray;
            color: black;
        }

    .statustxt {
        text-align: center;
        font-size: 9px;
        line-height: 14px;
    }

    /* Button styles */
    .small-button {
        padding: 4px 6px;
        font-size: 12px;
        height: 20px;
        min-width: 24px;
    }

    .button-section {
        width: 80%;
        margin: auto;
    }

    .button-container {
        display: flex;
        justify-content: left;
        align-items: center;
        height: 80%;
    }

    .custom-edit-button {
        background-color: lightblue;
        color: black;
        border: 1px solid #0056b3;
        white-space: nowrap;
        min-width: 40px !important;
    }

    #button-control .col-xs-12 {
        margin: 15px 0;
    }

    .small-text {
        font-size: 0.8rem;
    }

    /* Button icons font */
    @@font-face {
        font-family: 'button-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-btn-sb-icons {
        font-family: 'button-icons';
        line-height: 1;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .e-play-icon::before {
        content: '\e701';
    }

    .e-pause-icon::before {
        content: '\e705';
    }

    .e-open-icon::before {
        content: '\e70d';
    }

    .e-add-icon::before {
        content: '\e70a';
    }

    .e-grid .e-headercell .e-filtered::before {
        color: red; /* or add a dot, background, etc. */
        font-weight: bold;
    }
    .e-sortnumber {
	    display: none !important;
    }
    /* Responsive styles */
    @@media screen and (max-width: 1200px) {
        .custom-grid .e-rowcell,
        .custom-grid .e-headercell {
            font-size: 9px !important;
            padding: 1px 3px !important;
        }

        .statusback {
            width: 50px;
        }
    }

    @@media screen and (max-width: 768px) {
        .custom-grid .e-rowcell,
        .custom-grid .e-headercell {
            font-size: 8px !important;
            padding: 1px 2px !important;
        }
    }

</style>



