@page "/openorders-report"
@attribute [Authorize]
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Navigations
@using RepPortal.Models
@using RepPortal.Services
@using RepPortal.Shared
@using Syncfusion.XlsIO
@using System.IO

@inject SalesService SalesService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IRepCodeContext RepCodeContext



<PageTitle>Open Customer Orders</PageTitle>


@if (openOrderDetails == null && isLoading)
{
	<SfSpinner Visible="true" Label="Loading summaries..." Size="40"></SfSpinner>
}

else
{
	<div>
		<div class="active-filters">
			<button @onclick="ClearFilters">Clear Filters</button>
		</div>

	</div>
	<div style="margin-top: 5px; color: red; font-size: small">
		Tip: Set Items per page to 'ALL' before grouping records
	</div>
	<SfGrid ID="DetailsGrid" @ref="DetailsGrid" DataSource="@openOrderDetails" AllowPaging="@( !isLawlessRep )" AllowSorting="true" AllowReordering="true" AllowResizing="true" ShowColumnChooser="true" EnablePersistence="true"
	AllowExcelExport="true" Toolbar="@(new List<string>() { "ExcelExport", "Search" , "ColumnChooser"})" AllowGrouping="true" AllowTextWrap="true" AllowFiltering="true" >
		<GridEvents  OnToolbarClick="ToolbarClickHandler" TValue="OrderDetail"></GridEvents>
		<GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>
		<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
		<GridPageSettings PageSizes="@(new string[] { "20", "50", "100",  "All" })" PageSize="20"></GridPageSettings>
		<GridSortSettings AllowUnsort="true">
			<GridSortColumns>
				<GridSortColumn Field=@nameof(OrderDetail.CustName) Direction="SortDirection.Ascending"></GridSortColumn>
				<GridSortColumn Field=@nameof(OrderDetail.DueDate) Direction="SortDirection.Ascending"></GridSortColumn>
			</GridSortColumns>
		</GridSortSettings>

		<GridAggregates>
			<GridAggregate>
				<GridAggregateColumns>
					<GridAggregateColumn Field=@nameof(OrderDetail.OpenDollars) Type="AggregateType.Sum" Format="C2">
						<GroupFooterTemplate>
							@{
								var aggregate = (context as AggregateTemplateContext);
								<div>
									<p>Sum: @aggregate.Sum</p>
								</div>
							}
						</GroupFooterTemplate>
						<FooterTemplate>
							@{
								var aggregate = (context as AggregateTemplateContext);
							}
							<div>
								<p>Total: @aggregate.Sum</p>
							</div>
						</FooterTemplate>
					</GridAggregateColumn>
				</GridAggregateColumns>
			</GridAggregate>
		</GridAggregates>

		<GridColumns>
			<GridColumn Field=@nameof(OrderDetail.Cust) HeaderText="Customer #" Width="120" TextAlign="TextAlign.Left"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.CustName) HeaderText="Customer Name" Width="250"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.ShipToNum) HeaderText="Ship To #" Width="120"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.ShipToName) HeaderText="Name" Width="200"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.Item) HeaderText="Item" Width="120"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.ItemDesc) HeaderText="Item Description" Width="200"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.OpenQty) HeaderText="Open Units" Format="N0" Width="150" TextAlign="TextAlign.Right"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.Price) HeaderText="Price" Format="C2" Width="150" TextAlign="TextAlign.Right"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.OpenDollars) HeaderText="Open $" Format="C2" Width="150" TextAlign="TextAlign.Right"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.OrdDate) HeaderText="Order Date" Format="d" Type="ColumnType.Date" Width="100"></GridColumn>			
			<GridColumn Field=@nameof(OrderDetail.DueDate) HeaderText="Expected Ship Date" Format="d" Type="ColumnType.Date" Width="100"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.CustPO) HeaderText="Customer PO" Width="150"></GridColumn>
			<GridColumn Field=@nameof(OrderDetail.CoNum) HeaderText="Order #" Width="100"></GridColumn>




		</GridColumns>

	</SfGrid>
}

@code {

	private SfGrid<OrderDetail>? DetailsGrid; // Reference to the main grid
	private bool isLoading = true;
	private List<OrderDetail>? openOrderDetails; // Data source for the grid
	private bool isLawlessRep = false;

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;

		await SalesService.LogReportUsageAsync(RepCodeContext.CurrentRepCode, "Open Orders Report");

		try
		{
			// TODO: Pass SalesRep ID or filter criteria if needed
			openOrderDetails = await SalesService.GetAllOpenOrderDetailsAsync();
		}
		catch (Exception ex)
		{
			// Log the exception (using ILogger is recommended)
			Console.WriteLine($"Error loading order summaries: {ex.Message}");
			openOrderDetails = null; // Indicate error state
		}
		finally
		{
			isLawlessRep = RepCodeContext.CurrentRepCode == "LAW";
			isLoading = false;
		}
	}

	// --- Toolbar Click Handler (for Excel Export) ---
	public async Task ToolbarClickHandler(ClickEventArgs args) // Use specific type from Syncfusion.Blazor.Navigations
	{
		if (args.Item.Id != null && args.Item.Id.Contains("DetailsGrid_excelexport")) // Default ID structure for Excel Export button
		{

			var exportProperties = new ExcelExportProperties
			{

				FileName = $"OpenOrders_{DateTime.Now:yyyyMMdd}.xlsx"
			};

			await DetailsGrid.ExcelExport(exportProperties);

		}
	}
	private async Task ClearFilters()
	{
		await DetailsGrid.ClearFilteringAsync();
	
	}

}

