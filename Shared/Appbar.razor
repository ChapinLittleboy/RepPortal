@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.IdentityModel.Tokens
@using Syncfusion.Blazor.SplitButtons


@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SalesService SalesService
@inject IRepCodeContext RepCodeContext
@inject TitleService TitleService
@inject IJSRuntime JS


<div class="control-container">
	<SfAppBar Mode="AppBarMode.Prominent" ColorMode="AppBarColor.Inherit" CssClass="e-appbar">
		<div class="appbar-content">
			<!-- Combined Row: Logo, Title, and Navigation Menu -->
			<div class="d-flex justify-content-between align-items-center w-100">
				<div class="d-flex align-items-center">
					<img src="images/ChapinLogo.png" alt="Logo" class="appbar-logo" />
					<div class="app-title-wrapper">
						<span class="appbar-title">Rep Portal</span>
					</div> <!-- .app-title-wrapper -->
				</div>

				<!-- Navigation Menu - Moved here from separate row -->
				<div class="menu-control d-flex align-items-center">
					<SfButton CssClass="e-inherit" OnClick="GoHome">Home</SfButton>
					<SfDropDownButton Content="Reports" Items="@ReportItems" CssClass="e-inherit">
						<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
					</SfDropDownButton>
					<SfDropDownButton Content="Pricing" Items="@PricingItems" CssClass="e-inherit">
						<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
					</SfDropDownButton>
					<SfDropDownButton Content="Forms" Items="@FormsItems" CssClass="e-inherit">
						<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
					</SfDropDownButton>
					<SfDropDownButton Content="Marketing" Items="@MarketingItems" CssClass="e-inherit">
						<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
					</SfDropDownButton>
					<SfDropDownButton Content="Chapin Contacts" Items="@ContactItems" CssClass="e-inherit">
						<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
					</SfDropDownButton>
					@if (isAdmin)
					{
						<SfDropDownButton Content="Admin" Items="@AdminItems" CssClass="e-inherit">
							<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
						</SfDropDownButton>
					}
				</div>

				<!-- User Info & Auth -->
				<div class="user-auth-section">
					<AuthorizeView>
						<Authorized>
							<div class="user-info text-end">
								<a href="Identity/Account/Manage" class="nav-link">Hello, @welcomemsg</a>
								<div class="rep-name">@GetRepFullName(context.User)</div>
								<div class="rep-name">@GetRegions()</div>
							</div> <!-- .user-info -->
							<form method="post" action="Identity/Account/Logout" class="logout-form">
								<button type="submit" class="nav-link btn btn-link">Log out</button>
							</form>
						</Authorized>
						<NotAuthorized>
							<div class="d-flex align-items-center">
								<a href="Identity/Account/Register" class="nav-link">Register</a>
								<a href="Identity/Account/Login" class="nav-link">Log in</a>
							</div>
						</NotAuthorized>
					</AuthorizeView>
				</div>
			</div>
		</div> <!-- .appbar-content -->
	</SfAppBar>

    <div class="appbar-subtitle d-flex align-items-center">
        <medium class="text-muted me-2">@TitleService.PageSubtitle</medium>
        @if (!string.IsNullOrWhiteSpace(TitleService.PageHelpContent))
        {
            <a href="#" @onclick="OpenHelpDialog" @onclick:preventDefault class="text-primary small">
				@(string.IsNullOrWhiteSpace(TitleService.PageHelpLinkText) ? "Report Description/Explanation" : TitleService.PageHelpLinkText)
            </a>
        }
    </div>

	<SfDialog @ref="HelpDialog"
			  Width="500px"
			  IsModal="true"
			  ShowCloseIcon="true"
			  Visible="false"
			  Header="About This Form">
		<DialogTemplates>
			<Content>
				@((MarkupString)TitleService.PageHelpContent)
			</Content>
		</DialogTemplates>
	</SfDialog>
</div>


@code
{
	private string eventName = "No";
	private string welcomemsg;
	private string FirstName;
	private bool isAdmin;
	private bool isSuperUser;
	private IEnumerable<Claim> claims;


	private List<DropDownMenuItem> ReportItems = new()
	{
		new DropDownMenuItem { Text = "Rep Customer List - Active & Inactive Accounts", Id = "customerlist" },
		new DropDownMenuItem { Text = "Quick Order Lookup - Order/PO # Status", Id = "quickorderlookup" },
		// new DropDownMenuItem { Text = "Print Packing Lists", Id = "packinglists" },
		new DropDownMenuItem { Text = "Sales Rep - Monthly Invoiced Sales Reports", Id = "salesrepmonthlyinvoicesales" },
		new DropDownMenuItem { Text = "Open Orders Report", Id = "openordersreport" },
		new DropDownMenuItem { Text = "Shipments Report", Id = "shipmentsreport" },
		new DropDownMenuItem { Text = "Invoiced Accounts Report", Id = "invoicesreport" },
		new DropDownMenuItem { Text = "Monthly Sales Report - Historic Territory Based Sales", Id = "monthlysalesreport" },
		new DropDownMenuItem { Text = "Monthly Sales by Item Report - Historic Territory Based Sales", Id = "monthlysalesbyitemreport" }
	};

	private List<DropDownMenuItem> PricingItems = new()
	{
		new DropDownMenuItem { Text = "SPR/PCF Log", Id = "pcflogpage" },
		new DropDownMenuItem { Text = "Item Pricing", Id = "itempricingpage" }
	};

	private List<DropDownMenuItem> FormsItems = new()
	{
        new DropDownMenuItem { Text = "Forms", Id = "formspage" },
        new DropDownMenuItem { Text = "Request Certificate of Insurance", Id = "coirequest" }
	};

	private List<DropDownMenuItem> MarketingItems = new()
	{
		new DropDownMenuItem { Text = "Marketing", Id = "marketingpage" }
	};

	private List<DropDownMenuItem> ContactItems = new()
	{
		new DropDownMenuItem { Text = "Download Contacts", Id = "downloadcontacts" }
	};

	private List<DropDownMenuItem> AdminItems = new()
	{
        new DropDownMenuItem { Text = "Usage Dashboard", Id = "usagedashboard" },
        new DropDownMenuItem { Text = "Manage User Roles", Id = "manageuserroles" },
		new DropDownMenuItem { Text = "Debug User Identity", Id = "debuguseridentity" },
		new DropDownMenuItem { Text = "Manage RepCodes", Id = "managerepcodes" },
		new DropDownMenuItem { Text = "Manage Folders", Id = "managefolders" },
		new DropDownMenuItem { Text = "Manage Marketing Files", Id = "managemarketingfiles" },
		new DropDownMenuItem { Text = "Manage Page Help Text", Id = "pagehelp" },
		new DropDownMenuItem { Text = "Connected Users", Id = "connectedusers" },
		new DropDownMenuItem { Text = "Manage Excluded Hold Code", Id = "manageexcludedholdcodes" }
	};

	private void itemSelectedxxx(Syncfusion.Blazor.Navigations.MenuEventArgs<DropDownMenuItem> args)
	{
		var id = args.Item.Id;
		if (!string.IsNullOrEmpty(id))
		{
			//NavigationManager.NavigateTo(id);
		}
	}

	public class ItemModel
	{
		public string Text { get; set; }
		public string Id { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;


		if (user.Identity.IsAuthenticated)
		{
			var firstName = user.FindFirst(c => c.Type == "FirstName")?.Value;
			var lastName = user.FindFirst(c => c.Type == "LastName")?.Value;
			welcomemsg = $"{firstName} {lastName}!";
			isAdmin = user.IsInRole("Administrator") || user.IsInRole("SuperUser");
			isSuperUser = user.IsInRole("SuperUser");
		}
		else
		{
			welcomemsg = "Welcome, Guest!";
		}

		// ✅ Subscribe to RepCode change notifications
		RepCodeContext.OnRepCodeChanged += OnRepCodeChanged;

		TitleService.OnTitleChanged += StateHasChanged;
	}

	private SfDialog HelpDialog;

	private async Task OpenHelpDialog()
	{
		await HelpDialog.ShowAsync();
	}

	private void OnRepCodeChanged()
	{
		InvokeAsync(StateHasChanged); // re-render the component
	}

	public void Dispose()
	{
		RepCodeContext.OnRepCodeChanged -= OnRepCodeChanged;
	}


	private async Task<string> GetRepDisplayAsyncNotUsed()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		var userRepCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
		var effectiveRepCode = RepCodeContext.CurrentRepCode;
		var agencyName = SalesService.GetRepAgency(effectiveRepCode);

		var isOverridden = userRepCode != effectiveRepCode;

		var repDisplay = isOverridden
			? $"<span title=\"Impersonating another rep\">[{effectiveRepCode}*]</span> {agencyName}"
			: $"[{effectiveRepCode}] {agencyName}";

		return repDisplay;
	}


	private string GetRepFullName(System.Security.Claims.ClaimsPrincipal user)
	{
		// You might get this information from claims
		var firstName = user.FindFirst("FirstName")?.Value ?? string.Empty;
		var lastName = user.FindFirst("LastName")?.Value ?? string.Empty;
		// var repCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
		var repCode = RepCodeContext.CurrentRepCode;
		var agencyName = SalesService.GetRepAgency(repCode); // Assuming this is a synchronous call for simplicity

		return $"[{repCode}]  {agencyName}";
	}

	private async Task<string> GetRegionsAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		bool isAdmin = user.IsInRole("Administrator");
		var allRegions = RepCodeContext.CurrentRegions;

		// If not an admin, show only the user's single assigned region (from AspNetUsers)
		if (!isAdmin)
		{
			// Assuming only one Region claim per non-admin
			var singleRegion = allRegions.FirstOrDefault();
			if (!string.IsNullOrWhiteSpace(singleRegion))
			{
				return $"Region: {singleRegion}";
			}

			return string.Empty;
		}

		// Admins see all regions from the RepCodeContext (claims or overrides)
		if (allRegions != null && allRegions.Any())
		{
			return "Regions: " + string.Join(", ", allRegions);
		}

		return string.Empty;
	}

	private string GetRegions()
	{
		var regions = RepCodeContext.CurrentRegions;

		if (RepCodeContext.IsAdministrator)
		{
			if (regions != null && regions.Any())
			{
				var regionmsg = "Region(s): " + string.Join(", ", regions);
				return regionmsg;
			}

			return string.Empty;
		}
		else
		{
			if (!RepCodeContext.AssignedRegion.IsNullOrEmpty())
			{
				var regionmsg = "Region: " + RepCodeContext.AssignedRegion;
				return regionmsg;
			}

			return string.Empty;
		}
	}

	private void GoHome()
	{
		Navigation.NavigateTo("/");
	}

	private void ItemSelected(MenuEventArgs args)
	{
		//Selected menu item
		var selectedItem = args.Item.Text;
		var selectedId = args.Item.Id;
		this.eventName = "ItemSelected";
		string rpttype = null;

		if (args.Item.HtmlAttributes != null &&
			args.Item.HtmlAttributes.TryGetValue("title", out var tooltipObj))
		{
			rpttype = tooltipObj?.ToString();
			TitleService.PageSubtitle = selectedItem + " [" + rpttype + "]";
		}
		else
		{
            if (selectedItem != "Download Contacts")  // Contacts open in a different tab so don't change the tab that is already in use.
           
            {
                TitleService.PageSubtitle = selectedItem;
            }
        }

       


		TitleService.LoadPageHelpContentAsync(selectedId);
        TitleService.PageHelpLinkText = "Report Description/Explanation";  // The default

		switch (selectedId)
		{
			case "customerlist":
				//Navigate to Customer List page
                TitleService.PageHelpLinkText = string.Empty;
				Navigation.NavigateTo("/customerlist");
				break;
			case "quickorderlookup":
				//Navigate to Customer List page
				TitleService.PageHelpLinkText = "How to do a lookup";
				Navigation.NavigateTo("/order-lookup");
				break;
			case "packinglists":
				//Navigate to Packing List page
				
				Navigation.NavigateTo("/packing-list");
				break;
			case "monthlysalesreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/monthly-sales-report/cu");
				break;
			case "salesrepmonthlyinvoicesales":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/monthly-sales-report/ih");
				break;
			case "monthlysalesbyitemreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/monthly-item-sales-with-qty");
				break;
			case "shipmentsreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/shipments-report");
				break;
			case "openordersreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/openorders-report");
				break;
			case "invoicesreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/invoices-report");
				break;
			case "pcflogpage":
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/pcflist");
				break;
			case "itempricingpage":
				//Navigate to PCF Listing page
                TitleService.PageHelpLinkText = "How to do a lookup";
				Navigation.NavigateTo("/getitempricing");
				break;
			case "specialpricingpage":
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/getspecialpricing");
				break;
			case "formspage":
                TitleService.PageHelpLinkText = "About these forms";
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/forms-download");
				break;
			case "marketingpage":
				//Navigate to PCF Listing page
                TitleService.PageHelpLinkText = "About these forms";
				Navigation.NavigateTo("/marketing-download");
				break;
			case "downloadcontacts":
                TitleService.PageHelpLinkText = string.Empty;
                _ = OpenPdfAsync();
                break;
			case "pagehelp":
				Navigation.NavigateTo("/admin/page-help");
				break;
			case "manageuserroles":
				Navigation.NavigateTo("/admin/user-roles");
				break;
			case "debuguseridentity":
				Navigation.NavigateTo("/admin/debug-identity");
				break;
			case "managerepcodes":
				Navigation.NavigateTo("/admin/manage-repcodes");
				break;
			case "managefolders":
				Navigation.NavigateTo("/admin/folders");
				break;
			case "managemarketingfiles":
				Navigation.NavigateTo("/admin/marketingfiles");
				break;
			case "manageexcludedholdcodes":
				Navigation.NavigateTo("/admin/credit-hold-codes");
				break;
            case "connectedusers":
                Navigation.NavigateTo("/admin/connected");
                break;
			case "usagedashboard":
				Navigation.NavigateTo("/admin/usage-dashboard");
				break;
            case "coirequest":
                Navigation.NavigateTo("/COIRequest");
                break;
		}
	}
    private async Task OpenPdfAsync()
    {
        await JS.InvokeVoidAsync("window.open", "/RepDocs/Chapin%20International%20Internal%20Departmental%20Contacts.pdf?v=1", "_blank");
    }
}

<style>
	.control-container .e-btn.e-inherit {
		margin: 0 3px;
	}

	.e-appbar {
		padding: 8px 16px;
		height: auto; /* Allow the AppBar to expand based on content */
	}

	.appbar-content {
		display: flex;
		flex-direction: column;
		width: 100%;
	}

	.appbar-logo {
		height: 60px;
		margin-right: 15px;
	}

	.appbar-title {
		font-size: 1.8rem;
		font-weight: normal;
		font-family: Tahoma;
		color: var(--bs-primary);
	}

	.appbar-subtitle {
		display: flex;
		font-size: 1.1rem;
		font-weight: normal;
		color: #667;
		margin-left: 16px;
		margin-right: 16px;
		padding: 5px 0;
		
		align-items: center;
	}

	.app-title-wrapper {
		display: flex;
		flex-direction: column;
	}

	.nav-link {
		color: blue;
		text-decoration: none;
		margin-right: 10px;
	}

	.nav-link:hover {
		text-decoration: underline;
	}

	.logout-form {
		margin: 0;
	}

	.btn-link {
		background-color: transparent;
		border: none;
		color: blue;
		cursor: pointer;
		padding: 0;
	}

	.menu-control {
		margin: 0 20px;
	}

	.user-auth-section {
		display: flex;
		align-items: center;
	}

	.user-info {
		display: flex;
		flex-direction: column;
		align-items: flex-end;
	}

	.rep-name {
		font-size: 0.85rem;
		margin-top: -5px;
		color: blue;
	}

	.tooltip_style {
		position: absolute;
		left: calc(50% - 60px);
		top: 45%;
	}

	.property-panel-table div {
		padding: 0px;
	}

	.tooltip-target {
		display: inline-block;
		cursor: help;
	}

	.custom-tooltip .e-tip-content {
		white-space: normal;
	}

	.text-primary {
		color: #0d6efd !important;
	}

	.small,
	small {
		font-size: 0.875em;
	}
</style>