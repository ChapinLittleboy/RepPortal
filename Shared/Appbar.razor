@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SalesService SalesService
@inject IRepCodeContext RepCodeContext
@inject TitleService TitleService



<div class="control-container">
    <SfAppBar Mode="AppBarMode.Prominent" ColorMode="AppBarColor.Inherit" CssClass="e-appbar">
	    <div class="appbar-content">
		    <img src="images/ChapinLogo.png" alt="Logo" class="appbar-logo"/>
		    <div class="app-title-wrapper">
			    <span class="appbar-title" >Rep Portal</span>
		    </div>
		    <AppBarSpacer></AppBarSpacer>
		    <SfButton CssClass="e-inherit home-button" OnClick="GoHome">Home</SfButton>

		    <SfMenu CssClass="e-inherit" TValue="MenuItem">
			    <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>

			    <MenuItems>
				    <MenuItem Text="Reports">
					    <MenuItems>
                            <MenuItem Text="Customer List" />
                            <MenuItem Text="Quick Order Lookup"/>
                            <MenuItem Text="Monthly Sales Report"></MenuItem>
                            <MenuItem Text="Sales Rep Monthly Invoice Sales"></MenuItem>
						    <MenuItem Text="Monthly Sales By Item Report"></MenuItem>
						    <MenuItem Text="Shipments Report"></MenuItem>
						    <MenuItem Text="Open Orders Report"></MenuItem>
                            <MenuItem Text="Customer Invoices Report"></MenuItem>


					    </MenuItems>
				    </MenuItem>
			    </MenuItems>
		    </SfMenu>
		    <SfMenu CssClass="e-inherit" TValue="MenuItem">
			    <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
			    <MenuItems>
				    <MenuItem Text="Pricing">
					    <MenuItems>
						    <MenuItem Text="SPR/PCF Log" title="View Customer Contract Pricing"></MenuItem>
						    <MenuItem Text="Item Pricing" title="Non-contract pricing lookup"></MenuItem>
                           
					    </MenuItems>
				    </MenuItem>
			    </MenuItems>
		    </SfMenu>
		    <SfMenu CssClass="e-inherit" TValue="MenuItem">
			    <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
			    <MenuItems>
				    <MenuItem Text="Forms"></MenuItem>
			    </MenuItems>
		    </SfMenu>
		    <SfMenu CssClass="e-inherit" TValue="MenuItem">
			    <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
			    <MenuItems>
				    <MenuItem Text="Marketing"></MenuItem>
			    </MenuItems>
		    </SfMenu>
		    <SfMenu CssClass="e-inherit" TValue="MenuItem">
			    <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
			    <MenuItems>
				    <MenuItem Text="Chapin Contacts">
					    <MenuItems>
						    <MenuItem Text="Download Contacts" title="Download Chapin Contacts List"></MenuItem>

					    </MenuItems>
				    </MenuItem>
			    </MenuItems>
		    </SfMenu>

		    @if (isAdmin)
		    {
			    <SfMenu CssClass="e-inherit" TValue="MenuItem">
				    <MenuItems>
					    <MenuItem Text="Admin">
						    <MenuItems>
							    <AuthorizeView Roles="SuperUser">
								    <MenuItem Text="Manage User Roles" Url="/admin/user-roles"></MenuItem>
								    <MenuItem Text="Debug User Identity" Url="/admin/debug-identity"></MenuItem>
								    <MenuItem Text="Manage RepCodes" Url="/admin/manage-repcodes" />
								    <MenuItem Text="Manage Folders" Url="/admin/folders"/>
								    <MenuItem Text="Manage Marketing Files" Url="/admin/marketing-files" />

							    </AuthorizeView>
							    <MenuItem Text="Connected Users" Url="/admin/connected"></MenuItem>
							    <MenuItem Text="Manage Excluded Hold Code" Url="/admin/credit-hold-codes"></MenuItem>

						    </MenuItems>
					    </MenuItem>
				    </MenuItems>
			    </SfMenu>
		    }
		    <AppBarSpacer></AppBarSpacer>
		    <AuthorizeView>
			    <Authorized>
				    <div class="user-info">
					    <a href="Identity/Account/Manage" class="nav-link" >Hello, @welcomemsg</a>
					    <div class="rep-name">@GetRepFullName(context.User)</div>
					    <div class="rep-name">@GetRegions()</div>
				    </div>
				    <form method="post" action="Identity/Account/Logout" class="logout-form">
					    <button type="submit" class="nav-link btn btn-link">Log out</button>
				    </form>
			    </Authorized>
			    <NotAuthorized>
				    <a href="Identity/Account/Register" class="nav-link">Register</a>
				    <a href="Identity/Account/Login" class="nav-link">Log in</a>
			    </NotAuthorized>
		    </AuthorizeView>
	    </div>
    </SfAppBar>
</div>
@if (!string.IsNullOrEmpty(TitleService.PageSubtitle))
{
    <div class="appbar-subtitle">
		<medium class="text-muted">@TitleService.PageSubtitle</medium>
	</div>
}

@code
{
    private string eventName = "No";
    private string welcomemsg;
    private string FirstName;
    private bool isAdmin;
    private bool isSuperUser;
    private IEnumerable<Claim> claims;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity.IsAuthenticated)
        {
            var firstName = user.FindFirst(c => c.Type == "FirstName")?.Value;
            var lastName = user.FindFirst(c => c.Type == "LastName")?.Value;
            welcomemsg = $"{firstName} {lastName}!";
            isAdmin = user.IsInRole("Administrator") || user.IsInRole("SuperUser");
            isSuperUser = user.IsInRole("SuperUser");
            //claims = user.Claims;

        }
        else
        {
            welcomemsg = "Welcome, Guest!";
        }
     
        // ✅ Subscribe to RepCode change notifications
        RepCodeContext.OnRepCodeChanged += OnRepCodeChanged;

        TitleService.OnTitleChanged += StateHasChanged;


    }


    private void OnRepCodeChanged()
    {
        InvokeAsync(StateHasChanged); // re-render the component
    }
    public void Dispose()
    {
        RepCodeContext.OnRepCodeChanged -= OnRepCodeChanged;
    }


    private async Task<string> GetRepDisplayAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userRepCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
        var effectiveRepCode = RepCodeContext.CurrentRepCode;
        var agencyName = SalesService.GetRepAgency(effectiveRepCode);

        var isOverridden = userRepCode != effectiveRepCode;

        var repDisplay = isOverridden
            ? $"<span title=\"Impersonating another rep\">[{effectiveRepCode}*]</span> {agencyName}"
            : $"[{effectiveRepCode}] {agencyName}";

        return repDisplay;
    }




    private string GetRepFullName(System.Security.Claims.ClaimsPrincipal user)
    {
        // You might get this information from claims
        var firstName = user.FindFirst("FirstName")?.Value ?? string.Empty;
        var lastName = user.FindFirst("LastName")?.Value ?? string.Empty;
        // var repCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
        var repCode = RepCodeContext.CurrentRepCode;
       var agencyName = SalesService.GetRepAgency(repCode);// Assuming this is a synchronous call for simplicity
  
        return $"[{repCode}]  {agencyName}";

    }

	private string GetRegions()
	{
		var regions = RepCodeContext.CurrentRegions;
		if (regions != null && regions.Any())
		{
            var regionmsg = "Regions: " + string.Join(", ", regions);
            return regionmsg;
		}
		return string.Empty;
	}
    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }
   
    private void itemSelected(MenuEventArgs<MenuItem> args)
    {
        //Selected menu item
        var selectedItem = args.Item.Text;
        this.eventName = "ItemSelected";

		TitleService.PageSubtitle = selectedItem;

        switch (selectedItem)
        {
	        case "Customer List":
		        //Navigate to Customer List page
		        Navigation.NavigateTo("/customerlist");
		        break;
            case "Quick Order Lookup":
		        //Navigate to Customer List page
		        Navigation.NavigateTo("/order-lookup");
		        break;
	        case "Monthly Sales Report":
		        //Navigate to Monthly Sales Report page
		        Navigation.NavigateTo("/monthly-sales-report/cu");
		        break;
            case "Sales Rep Monthly Invoice Sales":
		        //Navigate to Monthly Sales Report page
		        Navigation.NavigateTo("/monthly-sales-report/ih");
		        break;
            case "Monthly Sales By Item Report old":
	            //Navigate to Monthly Sales Report page
                Navigation.NavigateTo("/monthly-item-sales-with-qty");
	            break;
            case "Monthly Sales By Item Report":
	            //Navigate to Monthly Sales Report page
                Navigation.NavigateTo("/monthly-item-sales-with-qty");
	            break;
            case "Shipments Report":
                //Navigate to Monthly Sales Report page
                Navigation.NavigateTo("/shipments-report");
                break;
            case "Open Orders Report":
                //Navigate to Monthly Sales Report page
                Navigation.NavigateTo("/openorders-report");
                break;
            case "Customer Invoices Report":
	            //Navigate to Monthly Sales Report page
	            Navigation.NavigateTo("/invoices-report");
	            break;
            case "SPR/PCF Log":
                //Navigate to PCF Listing page
                Navigation.NavigateTo("/pcflist");
                break;
            case "Item Pricing":
                //Navigate to PCF Listing page
                Navigation.NavigateTo("/getitempricing");
                break;
            case "Special Pricing":
	            //Navigate to PCF Listing page
	            Navigation.NavigateTo("/getspecialpricing");
	            break;
            case "Forms":
	            //Navigate to PCF Listing page
	            Navigation.NavigateTo("/forms-download");
	            break;
            case "Marketing":
                //Navigate to PCF Listing page
                Navigation.NavigateTo("/marketing-download");
                break;
            case "Download Contacts":
	            Navigation.NavigateTo("/RepDocs/Chapin International Internal Departmental Contacts.docx", forceLoad: true);
	            break;
            case "admin/folders":
	            Navigation.NavigateTo("/RepDocs/Chapin International Internal Departmental Contacts.docx", forceLoad: true);
	            break;
        }
    }
}

<style>
    .control-container .e-btn.e-inherit {
        margin: 0 3px;
    }
    e-appbar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 16px;
        color: red;
    }

    .appbar-content {
        display: flex;
        align-items: center;
    }

    .appbar-logo {
        height: 80px; /* Adjust the height as needed */
        margin-right: 30px;
    }

    .appbar-title {
        font-size: 2rem; /* Increased font size */
        font-weight: normal;
        font-family: Tahoma;
        vertical-align: top;
        color: var(--bs-primary); /* Use Bootstrap primary color */
    }
    .appbar-subtitle {
	    font-size: 1.2rem; /* Adjust as needed */
	    font-weight: normal;
	    color: #667;
	    margin-left: 100px;
    }
    .app-title-wrapper {
	    display: flex;
	    flex-direction: column;
	    margin-left: 10px; /* Adjust the spacing between the logo and the titles if needed */
    }

    .nav-link {
        color: blue;
        text-decoration: none;
        margin-right: 10px;
    }

    .nav-link:hover {
        text-decoration: underline;
    }

    .logout-form {
        margin: 0;
    }

    .btn-link {
        background-color: transparent;
        border: none;
        color: blue;
        cursor: pointer;
    }

    /* Top level menu items - target directly */
    .e-menu-container .e-menu > li.e-menu-item {
        font-size: 1.5rem !important;
    }

    /* Sub menu items - these will be in a popup container */
    .e-menu-popup .e-menu-item {
        font-size: 1rem !important;
    }

    .home-button {
        font-size: 1.5rem; /* Increased font size for Home button */
        line-height: 1.5rem; /* Adjust line height to match font size */
        vertical-align: top; /* Align text to the top */
    }
    .user-info {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        
    }

    .rep-name {
        font-size: 0.85rem;
        margin-top: -5px;
        color: blue;
        
    }

</style>

		

		

