@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.IdentityModel.Tokens

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SalesService SalesService
@inject IRepCodeContext RepCodeContext
@inject TitleService TitleService



<div class="control-container">
    <SfAppBar Mode="AppBarMode.Prominent" ColorMode="AppBarColor.Inherit" CssClass="e-appbar">
        <div class="appbar-content">
            <img src="images/ChapinLogo.png" alt="Logo" class="appbar-logo"/>
            <div class="app-title-wrapper">
                <span class="appbar-title" >Rep Portal</span>
            </div>
            <AppBarSpacer></AppBarSpacer>
            <SfButton CssClass="e-inherit home-button" OnClick="GoHome">Home</SfButton>

            <SfMenu CssClass="e-inherit" TValue="MenuItem">
                <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>

                <MenuItems>
                    <MenuItem Text="Reports">
                        <MenuItems>
                            <MenuItem Id="customerlist" Text="Rep Customer List - Active & Inactive Accounts" title="Rep Agency on the Account" />
                            <MenuItem Id="quickorderlookup" Text="Quick Order Lookup - Order/PO # Status" title="Rep Agency on the Order" />
                            <MenuItem Id="salesrepmonthlyinvoicesales" Text="Sales Rep - Monthly Invoiced Sales Reports" title="Rep Agency Specific"></MenuItem>
                            <MenuItem Id="openordersreport" Text="Open Orders Report" title="Rep Agency Specific"></MenuItem>
                            <MenuItem Id="shipmentsreport" Text="Shipments Report" title="Rep Agency Specific"></MenuItem>
                            <MenuItem Id="invoicesreport" Text="Invoiced Accounts Report" title="Rep Agency Specific"></MenuItem>
                            <MenuItem Id="monthlysalesreport" Text="Monthly Sales Report - Historic Territory Based Sales" title="Report not Rep Specific/Historic Territory Base"></MenuItem>
                            <MenuItem Id="monthlysalesbyitemreport" Text="Monthly Sales by Item Report - Historic Territory Based Sales" title="Report not Rep Specific/Historic Territory Base"></MenuItem>
                        </MenuItems>
                    </MenuItem>
                </MenuItems>
            </SfMenu>
            <SfMenu CssClass="e-inherit" TValue="MenuItem">
                <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
                <MenuItems>
                    <MenuItem Id="pricingpage" Text="Pricing">
                        <MenuItems>
                            <MenuItem Id="pcflogpage" Text="SPR/PCF Log" title="View Customer Contract Pricing"></MenuItem>
                            <MenuItem Id="itempricingpage" Text="Item Pricing" title="Non-contract pricing lookup"></MenuItem>

                        </MenuItems>
                    </MenuItem>
                </MenuItems>
            </SfMenu>
            <SfMenu CssClass="e-inherit" TValue="MenuItem">
                <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
                <MenuItems>
                    <MenuItem Id="formspage" Text="Forms"></MenuItem>
                </MenuItems>
            </SfMenu>
            <SfMenu CssClass="e-inherit" TValue="MenuItem">
                <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
                <MenuItems>
                    <MenuItem Id="marketingpage" Text="Marketing"></MenuItem>
                </MenuItems>
            </SfMenu>
            <SfMenu CssClass="e-inherit" TValue="MenuItem">
                <MenuEvents TValue="MenuItem" ItemSelected="itemSelected"></MenuEvents>
                <MenuItems>
                    <MenuItem Id="contactspage" Text="Chapin Contacts">
                        <MenuItems>
                            <MenuItem Id="downloadcontacts" Text="Download Contacts" title="Download Chapin Contacts List"></MenuItem>

                        </MenuItems>
                    </MenuItem>
                </MenuItems>
            </SfMenu>

            @if (isAdmin)
            {
                <SfMenu CssClass="e-inherit" TValue="MenuItem">
                    <MenuItems>
                        <MenuItem Text="Admin">
                            <MenuItems>
                                <AuthorizeView Roles="SuperUser">
                                    <MenuItem Id="manageuserroles" Text="Manage User Roles" Url="/admin/user-roles"></MenuItem>
                                    <MenuItem Id="debuguseridentity" Text="Debug User Identity" Url="/admin/debug-identity"></MenuItem>
                                    <MenuItem Id="managerepcodes" Text="Manage RepCodes" Url="/admin/manage-repcodes" />
                                    <MenuItem Id="managefolders" Text="Manage Folders" Url="/admin/folders" />
                                    <MenuItem Id="managemarketingfiles" Text="Manage Marketing Files" Url="/admin/marketing-files" />

                                </AuthorizeView>
                                <MenuItem Id="pagehelp" Text="Manage Page Help Text" Url="/admin/page-help"></MenuItem>
                                <MenuItem Id="connectedusers" Text="Connected Users" Url="/admin/connected"></MenuItem>
                                <MenuItem Id="manageexcludedholdcodes" Text="Manage Excluded Hold Code" Url="/admin/credit-hold-codes"></MenuItem>

                            </MenuItems>
                        </MenuItem>
                    </MenuItems>
                </SfMenu>
            }
            <AppBarSpacer></AppBarSpacer>
            <AuthorizeView>
                <Authorized>
                    <div class="user-info">
                        <a href="Identity/Account/Manage" class="nav-link" >Hello, @welcomemsg</a>
                        <div class="rep-name">@GetRepFullName(context.User)</div>
                        <div class="rep-name">@GetRegions()</div>
                    </div>
                    <form method="post" action="Identity/Account/Logout" class="logout-form">
                        <button type="submit" class="nav-link btn btn-link">Log out</button>
                    </form>
                </Authorized>
                <NotAuthorized>
                    <a href="Identity/Account/Register" class="nav-link">Register</a>
                    <a href="Identity/Account/Login" class="nav-link">Log in</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </SfAppBar>
</div>

<div class="appbar-subtitle d-flex justify-content-between align-items-center">
    <medium class="text-muted">@TitleService.PageSubtitle</medium>

    @if (!string.IsNullOrWhiteSpace(TitleService.PageHelpContent))
    {

        <a href="#" @onclick="OpenHelpDialog" @onclick:preventDefault class="text-primary small">📘 About this form</a>

    }
</div>

<SfDialog @ref="HelpDialog"
Width="500px"
IsModal="true"
ShowCloseIcon="true"
Visible="false"
Header="About This Form">
    <DialogTemplates>
        <Content>
	        @((MarkupString)TitleService.PageHelpContent)
        </Content>
    </DialogTemplates>
</SfDialog>

@code
{
    private string eventName = "No";
    private string welcomemsg;
    private string FirstName;
    private bool isAdmin;
    private bool isSuperUser;
    private IEnumerable<Claim> claims;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity.IsAuthenticated)
        {
            var firstName = user.FindFirst(c => c.Type == "FirstName")?.Value;
            var lastName = user.FindFirst(c => c.Type == "LastName")?.Value;
            welcomemsg = $"{firstName} {lastName}!";
            isAdmin = user.IsInRole("Administrator") || user.IsInRole("SuperUser");
            isSuperUser = user.IsInRole("SuperUser");


        }
        else
        {
            welcomemsg = "Welcome, Guest!";
        }

        // ✅ Subscribe to RepCode change notifications
        RepCodeContext.OnRepCodeChanged += OnRepCodeChanged;

        TitleService.OnTitleChanged += StateHasChanged;


    }

    private SfDialog HelpDialog;

    private async Task OpenHelpDialog()
    {
        await HelpDialog.ShowAsync();
    }

    private void OnRepCodeChanged()
    {

        InvokeAsync(StateHasChanged); // re-render the component
    }
    public void Dispose()
    {
        RepCodeContext.OnRepCodeChanged -= OnRepCodeChanged;
    }


    private async Task<string> GetRepDisplayAsyncNotUsed()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userRepCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
        var effectiveRepCode = RepCodeContext.CurrentRepCode;
        var agencyName = SalesService.GetRepAgency(effectiveRepCode);

        var isOverridden = userRepCode != effectiveRepCode;

        var repDisplay = isOverridden
            ? $"<span title=\"Impersonating another rep\">[{effectiveRepCode}*]</span> {agencyName}"
            : $"[{effectiveRepCode}] {agencyName}";

        return repDisplay;
    }




    private string GetRepFullName(System.Security.Claims.ClaimsPrincipal user)
    {
        // You might get this information from claims
        var firstName = user.FindFirst("FirstName")?.Value ?? string.Empty;
        var lastName = user.FindFirst("LastName")?.Value ?? string.Empty;
        // var repCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
        var repCode = RepCodeContext.CurrentRepCode;
        var agencyName = SalesService.GetRepAgency(repCode);// Assuming this is a synchronous call for simplicity

        return $"[{repCode}]  {agencyName}";

    }

    private async Task<string> GetRegionsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        bool isAdmin = user.IsInRole("Administrator");
        var allRegions = RepCodeContext.CurrentRegions;

        // If not an admin, show only the user's single assigned region (from AspNetUsers)
        if (!isAdmin)
        {
            // Assuming only one Region claim per non-admin
            var singleRegion = allRegions.FirstOrDefault();
            if (!string.IsNullOrWhiteSpace(singleRegion))
            {
                return $"Region: {singleRegion}";
            }

            return string.Empty;
        }

        // Admins see all regions from the RepCodeContext (claims or overrides)
        if (allRegions != null && allRegions.Any())
        {
            return "Regions: " + string.Join(", ", allRegions);
        }

        return string.Empty;
    }
    private string GetRegions()
    {
        var regions = RepCodeContext.CurrentRegions;

        if (RepCodeContext.IsAdministrator)
        {
            if (regions != null && regions.Any())
            {
                var regionmsg = "Region(s): " + string.Join(", ", regions);
                return regionmsg;
            }

            return string.Empty;
        }
        else
        {
            if (!RepCodeContext.AssignedRegion.IsNullOrEmpty())
            {
                var regionmsg = "Region: " + RepCodeContext.AssignedRegion;
                return regionmsg;
            }

            return string.Empty;
        }
    }
    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private void itemSelected(MenuEventArgs<MenuItem> args)
    {
        //Selected menu item
        var selectedItem = args.Item.Text;
        var selectedId = args.Item.Id;
        this.eventName = "ItemSelected";
        string rpttype = null;

        if (args.Item.HtmlAttributes != null && 
            args.Item.HtmlAttributes.TryGetValue("title", out var tooltipObj))
        {
            rpttype = tooltipObj?.ToString();
            TitleService.PageSubtitle = selectedItem + " [" + rpttype + "]"; 
        }
        else
        {
            TitleService.PageSubtitle = selectedItem;
        }

        TitleService.LoadPageHelpContentAsync(selectedId);

        switch (selectedId)
        {
	        case "customerlist":
		        //Navigate to Customer List page
		        Navigation.NavigateTo("/customerlist");
		        break;
            case "quickorderlookup":
		        //Navigate to Customer List page
		        Navigation.NavigateTo("/order-lookup");
		        break;
	        case "monthlysalesreport":
		        //Navigate to Monthly Sales Report page
		        Navigation.NavigateTo("/monthly-sales-report/cu");
		        break;
            case "salesrepmonthlyinvoicesales":
		        //Navigate to Monthly Sales Report page
		        Navigation.NavigateTo("/monthly-sales-report/ih");
		        break;
            case "monthlysalesbyitemreport":
	            //Navigate to Monthly Sales Report page
                Navigation.NavigateTo("/monthly-item-sales-with-qty");
	            break;
            case "shipmentsreport":
                //Navigate to Monthly Sales Report page
                Navigation.NavigateTo("/shipments-report");
                break;
            case "openordersreport":
                //Navigate to Monthly Sales Report page
                Navigation.NavigateTo("/openorders-report");
                break;
            case "invoicesreport":
	            //Navigate to Monthly Sales Report page
	            Navigation.NavigateTo("/invoices-report");
	            break;
            case "pcflogpage":
                //Navigate to PCF Listing page
                Navigation.NavigateTo("/pcflist");
                break;
            case "itempricingpage":
                //Navigate to PCF Listing page
                Navigation.NavigateTo("/getitempricing");
                break;
            case "specialpricingpage":
	            //Navigate to PCF Listing page
	            Navigation.NavigateTo("/getspecialpricing");
	            break;
            case "formspage":
	            //Navigate to PCF Listing page
	            Navigation.NavigateTo("/forms-download");
	            break;
            case "marketingpage":
                //Navigate to PCF Listing page
                Navigation.NavigateTo("/marketing-download");
                break;
            case "downloadcontacts":
                Navigation.NavigateTo("/RepDocs/Chapin International Internal Departmental Contacts.pdf", forceLoad: true);
	            break;
            
        }
    }
}

<style>
    .control-container .e-btn.e-inherit {
        margin: 0 3px;
    }
    e-appbar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 16px;
        color: red;
    }

    .appbar-content {
        display: flex;
        align-items: center;
    }

    .appbar-logo {
        height: 80px; /* Adjust the height as needed */
        margin-right: 30px;
    }

    .appbar-title {
        font-size: 2rem; /* Increased font size */
        font-weight: normal;
        font-family: Tahoma;
        vertical-align: top;
        color: var(--bs-primary); /* Use Bootstrap primary color */
    }
    .appbar-subtitle {
	    display: flex;
	    font-size: 1.2rem; /* Adjust as needed */
	    font-weight: normal;
	    color: #667;
	    margin-left: 100px;
	    margin-right: 50px;
	    justify-content: space-between;
	    align-items: center;
    }

    .app-title-wrapper {
	    display: flex;
	    flex-direction: column;
	    margin-left: 10px; /* Adjust the spacing between the logo and the titles if needed */
    }

    .nav-link {
        color: blue;
        text-decoration: none;
        margin-right: 10px;
    }

    .nav-link:hover {
        text-decoration: underline;
    }

    .logout-form {
        margin: 0;
    }

    .btn-link {
        background-color: transparent;
        border: none;
        color: blue;
        cursor: pointer;
    }

    /* Top level menu items - target directly */
    .e-menu-container .e-menu > li.e-menu-item {
        font-size: 1.5rem !important;
    }

    /* Sub menu items - these will be in a popup container */
    .e-menu-popup .e-menu-item {
        font-size: 1rem !important;
    }

    .home-button {
        font-size: 1.5rem; /* Increased font size for Home button */
        line-height: 1.5rem; /* Adjust line height to match font size */
        vertical-align: top; /* Align text to the top */
    }
    .user-info {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        
    }

    .rep-name {
        font-size: 0.85rem;
        margin-top: -5px;
        color: blue;
        
    }  
    .tooltip_style {
	       position: absolute;
	       left: calc( 50% - 60px);
	       top: 45%;
       }
    .property-panel-table div {
	    padding: 0px;
    }
    .tooltip-target {
	    display: inline-block;
	    cursor: help;
    }

    .custom-tooltip .e-tip-content {
	    white-space: normal;
    }

    .text-primary {
	    color: #0d6efd !important;

    }.small,
     small {
	     font-size: 0.875em;  /* 87.5% of the parent element */
     }
</style>

		

		

