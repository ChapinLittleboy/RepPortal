@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.IdentityModel.Tokens
@using Syncfusion.Blazor.SplitButtons


@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SalesService SalesService
@inject IRepCodeContext RepCodeContext
@inject TitleService TitleService


<div class="control-container">
	<SfAppBar Mode="AppBarMode.Prominent" ColorMode="AppBarColor.Inherit" CssClass="e-appbar">
		<div class="appbar-content">
			<div class="d-flex align-items-center gap-2 flex-wrap">
				<img src="images/ChapinLogo.png" alt="Logo" class="appbar-logo"/>
				<div class="app-title-wrapper">
					<span class="appbar-title">Rep Portal</span>
				</div> <!-- .app-title-wrapper -->
				<SfButton CssClass="e-inherit home-button" OnClick="GoHome">Home</SfButton>
			</div> <!-- .d-flex (logo, title, home) -->

			<div class="menu-control d-flex flex-wrap gap-2">
				<SfDropDownButton Content="Reports" Items="@ReportItems" CssClass="e-inherit">
					<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
				</SfDropDownButton>
				<SfDropDownButton Content="Pricing" Items="@PricingItems" CssClass="e-inherit">
					<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
				</SfDropDownButton>
				<SfDropDownButton Content="Forms" Items="@FormsItems" CssClass="e-inherit">
					<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
				</SfDropDownButton>
				<SfDropDownButton Content="Marketing" Items="@MarketingItems" CssClass="e-inherit">
					<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
				</SfDropDownButton>
				<SfDropDownButton Content="Chapin Contacts" Items="@ContactItems" CssClass="e-inherit">
					<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
				</SfDropDownButton>
				@if (isAdmin)
				{
					<SfDropDownButton Content="Admin" Items="@AdminItems" CssClass="e-inherit">
						<DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
					</SfDropDownButton>
				}
			</div> <!-- .menu-control -->

		

			<div class="d-flex align-items-center gap-2 flex-wrap">
				<AuthorizeView>
					<Authorized>
						<div class="user-info text-end">
							<a href="Identity/Account/Manage" class="nav-link">Hello, @welcomemsg</a>
							<div class="rep-name">@GetRepFullName(context.User)</div>
							<div class="rep-name">@GetRegions()</div>
						</div> <!-- .user-info -->
						<form method="post" action="Identity/Account/Logout" class="logout-form">
							<button type="submit" class="nav-link btn btn-link">Log out</button>
						</form>
					</Authorized>
					<NotAuthorized>
						<a href="Identity/Account/Register" class="nav-link">Register</a>
						<a href="Identity/Account/Login" class="nav-link">Log in</a>
					</NotAuthorized>
				</AuthorizeView>
			</div> <!-- .d-flex (user info, auth) -->

		</div> <!-- .appbar-content -->




	</SfAppBar>
	
	<div class="appbar-subtitle d-flex justify-content-between align-items-center">
		<medium class="text-muted">@TitleService.PageSubtitle</medium>
		@if (!string.IsNullOrWhiteSpace(TitleService.PageHelpContent))
		{
			<a href="#" @onclick="OpenHelpDialog" @onclick:preventDefault class="text-primary small">📘 About this form</a>
		}
	</div> <!-- .appbar-subtitle -->


	<SfDialog @ref="HelpDialog"
	          Width="500px"
	          IsModal="true"
	          ShowCloseIcon="true"
	          Visible="false"
	          Header="About This Form">
		<DialogTemplates>
			<Content>
				@((MarkupString)TitleService.PageHelpContent)
			</Content>
		</DialogTemplates>
	</SfDialog>
</div>


@code
{
	private string eventName = "No";
	private string welcomemsg;
	private string FirstName;
	private bool isAdmin;
	private bool isSuperUser;
	private IEnumerable<Claim> claims;


	private List<DropDownMenuItem> ReportItems = new()
	{
		new DropDownMenuItem { Text = "Rep Customer List - Active & Inactive Accounts", Id = "customerlist" },
		new DropDownMenuItem { Text = "Quick Order Lookup - Order/PO # Status", Id = "quickorderlookup" },
		new DropDownMenuItem { Text = "Sales Rep - Monthly Invoiced Sales Reports", Id = "salesrepmonthlyinvoicesales" },
		new DropDownMenuItem { Text = "Open Orders Report", Id = "openordersreport" },
		new DropDownMenuItem { Text = "Shipments Report", Id = "shipmentsreport" },
		new DropDownMenuItem { Text = "Invoiced Accounts Report", Id = "invoicesreport" },
		new DropDownMenuItem { Text = "Monthly Sales Report - Historic Territory Based Sales", Id = "monthlysalesreport" },
		new DropDownMenuItem { Text = "Monthly Sales by Item Report - Historic Territory Based Sales", Id = "monthlysalesbyitemreport" }
	};

	private List<DropDownMenuItem> PricingItems = new()
	{
		new DropDownMenuItem { Text = "SPR/PCF Log", Id = "pcflogpage" },
		new DropDownMenuItem { Text = "Item Pricing", Id = "itempricingpage" }
	};

	private List<DropDownMenuItem> FormsItems = new()
	{
		new DropDownMenuItem { Text = "Forms", Id = "formspage" }
	};

	private List<DropDownMenuItem> MarketingItems = new()
	{
		new DropDownMenuItem { Text = "Marketing", Id = "marketingpage" }
	};

	private List<DropDownMenuItem> ContactItems = new()
	{
		new DropDownMenuItem { Text = "Download Contacts", Id = "downloadcontacts" }
	};

	private List<DropDownMenuItem> AdminItems = new()
	{
		new DropDownMenuItem { Text = "Manage User Roles", Id = "manageuserroles" },
		new DropDownMenuItem { Text = "Debug User Identity", Id = "debuguseridentity" },
		new DropDownMenuItem { Text = "Manage RepCodes", Id = "managerepcodes" },
		new DropDownMenuItem { Text = "Manage Folders", Id = "managefolders" },
		new DropDownMenuItem { Text = "Manage Marketing Files", Id = "managemarketingfiles" },
		new DropDownMenuItem { Text = "Manage Page Help Text", Id = "pagehelp" },
		new DropDownMenuItem { Text = "Connected Users", Id = "connectedusers" },
		new DropDownMenuItem { Text = "Manage Excluded Hold Code", Id = "manageexcludedholdcodes" }
	};

	private void itemSelectedxxx(Syncfusion.Blazor.Navigations.MenuEventArgs<DropDownMenuItem> args)
	{
		var id = args.Item.Id;
		if (!string.IsNullOrEmpty(id))
		{
			//NavigationManager.NavigateTo(id);
		}
	}

	public class ItemModel
	{
		public string Text { get; set; }
		public string Id { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;


		if (user.Identity.IsAuthenticated)
		{
			var firstName = user.FindFirst(c => c.Type == "FirstName")?.Value;
			var lastName = user.FindFirst(c => c.Type == "LastName")?.Value;
			welcomemsg = $"{firstName} {lastName}!";
			isAdmin = user.IsInRole("Administrator") || user.IsInRole("SuperUser");
			isSuperUser = user.IsInRole("SuperUser");
		}
		else
		{
			welcomemsg = "Welcome, Guest!";
		}

		// ✅ Subscribe to RepCode change notifications
		RepCodeContext.OnRepCodeChanged += OnRepCodeChanged;

		TitleService.OnTitleChanged += StateHasChanged;
	}

	private SfDialog HelpDialog;

	private async Task OpenHelpDialog()
	{
		await HelpDialog.ShowAsync();
	}

	private void OnRepCodeChanged()
	{
		InvokeAsync(StateHasChanged); // re-render the component
	}

	public void Dispose()
	{
		RepCodeContext.OnRepCodeChanged -= OnRepCodeChanged;
	}


	private async Task<string> GetRepDisplayAsyncNotUsed()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		var userRepCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
		var effectiveRepCode = RepCodeContext.CurrentRepCode;
		var agencyName = SalesService.GetRepAgency(effectiveRepCode);

		var isOverridden = userRepCode != effectiveRepCode;

		var repDisplay = isOverridden
			? $"<span title=\"Impersonating another rep\">[{effectiveRepCode}*]</span> {agencyName}"
			: $"[{effectiveRepCode}] {agencyName}";

		return repDisplay;
	}


	private string GetRepFullName(System.Security.Claims.ClaimsPrincipal user)
	{
		// You might get this information from claims
		var firstName = user.FindFirst("FirstName")?.Value ?? string.Empty;
		var lastName = user.FindFirst("LastName")?.Value ?? string.Empty;
		// var repCode = user.FindFirst("RepCode")?.Value ?? string.Empty;
		var repCode = RepCodeContext.CurrentRepCode;
		var agencyName = SalesService.GetRepAgency(repCode); // Assuming this is a synchronous call for simplicity

		return $"[{repCode}]  {agencyName}";
	}

	private async Task<string> GetRegionsAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		bool isAdmin = user.IsInRole("Administrator");
		var allRegions = RepCodeContext.CurrentRegions;

		// If not an admin, show only the user's single assigned region (from AspNetUsers)
		if (!isAdmin)
		{
			// Assuming only one Region claim per non-admin
			var singleRegion = allRegions.FirstOrDefault();
			if (!string.IsNullOrWhiteSpace(singleRegion))
			{
				return $"Region: {singleRegion}";
			}

			return string.Empty;
		}

		// Admins see all regions from the RepCodeContext (claims or overrides)
		if (allRegions != null && allRegions.Any())
		{
			return "Regions: " + string.Join(", ", allRegions);
		}

		return string.Empty;
	}

	private string GetRegions()
	{
		var regions = RepCodeContext.CurrentRegions;

		if (RepCodeContext.IsAdministrator)
		{
			if (regions != null && regions.Any())
			{
				var regionmsg = "Region(s): " + string.Join(", ", regions);
				return regionmsg;
			}

			return string.Empty;
		}
		else
		{
			if (!RepCodeContext.AssignedRegion.IsNullOrEmpty())
			{
				var regionmsg = "Region: " + RepCodeContext.AssignedRegion;
				return regionmsg;
			}

			return string.Empty;
		}
	}

	private void GoHome()
	{
		Navigation.NavigateTo("/");
	}

	private void ItemSelected(MenuEventArgs args)
	{
		//Selected menu item
		var selectedItem = args.Item.Text;
		var selectedId = args.Item.Id;
		this.eventName = "ItemSelected";
		string rpttype = null;

		if (args.Item.HtmlAttributes != null &&
		    args.Item.HtmlAttributes.TryGetValue("title", out var tooltipObj))
		{
			rpttype = tooltipObj?.ToString();
			TitleService.PageSubtitle = selectedItem + " [" + rpttype + "]";
		}
		else
		{
			TitleService.PageSubtitle = selectedItem;
		}


		TitleService.LoadPageHelpContentAsync(selectedId);

		switch (selectedId)
		{
			case "customerlist":
				//Navigate to Customer List page
				Navigation.NavigateTo("/customerlist");
				break;
			case "quickorderlookup":
				//Navigate to Customer List page
				Navigation.NavigateTo("/order-lookup");
				break;
			case "monthlysalesreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/monthly-sales-report/cu");
				break;
			case "salesrepmonthlyinvoicesales":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/monthly-sales-report/ih");
				break;
			case "monthlysalesbyitemreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/monthly-item-sales-with-qty");
				break;
			case "shipmentsreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/shipments-report");
				break;
			case "openordersreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/openorders-report");
				break;
			case "invoicesreport":
				//Navigate to Monthly Sales Report page
				Navigation.NavigateTo("/invoices-report");
				break;
			case "pcflogpage":
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/pcflist");
				break;
			case "itempricingpage":
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/getitempricing");
				break;
			case "specialpricingpage":
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/getspecialpricing");
				break;
			case "formspage":
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/forms-download");
				break;
			case "marketingpage":
				//Navigate to PCF Listing page
				Navigation.NavigateTo("/marketing-download");
				break;
			case "downloadcontacts":
				Navigation.NavigateTo("/RepDocs/Chapin International Internal Departmental Contacts.pdf", forceLoad: true);
				break;
			case "pagehelp":
				Navigation.NavigateTo("/admin/page-help", forceLoad: true);
				break;
			case "manageuserroles":
				Navigation.NavigateTo("/admin/user-roles", forceLoad: true);
				break;
			case "debuguseridentity":
				Navigation.NavigateTo("/admin/debug-identity", forceLoad: true);
				break;
			case "managerepcodes":
				Navigation.NavigateTo("/admin/manage-repcodes", forceLoad: true);
				break;
			case "managefolders":
				Navigation.NavigateTo("/admin/folders", forceLoad: true);
				break;
			case "managemarketingfiles":
				Navigation.NavigateTo("/admin/marketingfiles", forceLoad: true);
				break;
			case "manageexcludedholdcodes":
				Navigation.NavigateTo("/admin/credit-hold-codes", forceLoad: true);
				break;
			case "connectedusers":
				Navigation.NavigateTo("/admin/connected", forceLoad: true);
				break;
		}
	}
}

<style>
	.control-container .e-btn.e-inherit { margin: 0 3px; }

	e-appbar {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 0 16px;
		color: red;
	}

	.appbar-content {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		justify-content: space-between;
		gap: 0.5rem;
	}

	.appbar-logo {
		height: 80px; /* Adjust the height as needed */
		margin-right: 30px;
	}

	.appbar-title {
		font-size: 2rem; /* Increased font size */
		font-weight: normal;
		font-family: Tahoma;
		vertical-align: top;
		color: var(--bs-primary); /* Use Bootstrap primary color */
	}

	.appbar-subtitle {
		display: flex;
		font-size: 1.2rem; /* Adjust as needed */
		font-weight: normal;
		color: #667;
		margin-left: 100px;
		margin-right: 50px;
		justify-content: space-between;
		align-items: center;
	}

	.app-title-wrapper {
		display: flex;
		flex-direction: column;
		margin-left: 10px; /* Adjust the spacing between the logo and the titles if needed */
	}

	.nav-link {
		color: blue;
		text-decoration: none;
		margin-right: 10px;
	}

	.nav-link:hover { text-decoration: underline; }

	.logout-form { margin: 0; }

	.btn-link {
		background-color: transparent;
		border: none;
		color: blue;
		cursor: pointer;
	}

	/* Top level menu items - target directly */

	.e-menu-container .e-menu > li.e-menu-item {
		font-size: 1.3rem !important;
		margin-bottom: 8rem;
		vertical-align: top;
	}

	/* Sub menu items - these will be in a popup container */

	.e-menu-popup .e-menu-item { font-size: 1rem !important; }

	.home-button {
		font-size: 1.5rem; /* Increased font size for Home button */
		line-height: 1.5rem; /* Adjust line height to match font size */
		vertical-align: top; /* Align text to the top */
	}

	.user-info {
		display: flex;
		flex-direction: column;
		align-items: flex-end;
	}

	.rep-name {
		font-size: 0.85rem;
		margin-top: -5px;
		color: blue;
	}

	.tooltip_style {
		position: absolute;
		left: calc(50% - 60px);
		top: 45%;
	}

	.property-panel-table div { padding: 0px; }

	.tooltip-target {
		display: inline-block;
		cursor: help;
	}

	.custom-tooltip .e-tip-content { white-space: normal; }

	.text-primary { color: #0d6efd !important; }

	.small,
	small {
		font-size: 0.875em; /* 87.5% of the parent element */
	}

	.menu-control {
		margin: 45px auto 0;
		text-align: center;
	}

</style>